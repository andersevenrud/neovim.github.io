{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Features API is first-class: discoverable , versioned , documented . MessagePack structured communication enables extensions in any language. Remote plugins run as co-processes, safely and asynchronously. GUIs, IDEs, web browsers can --embed Neovim as an editor or script host. Usable Strong defaults Works the same everywhere: one build-type, one command Modern terminal features such as cursor styling, focus events, bracketed paste Built-in terminal emulator Drop-in vim Fully compatible with Vim's editing model and the Vimscript language. Start with :help nvim-from-vim if you already use Vim. FAQ What is the project status? The current stable release version is 0.5 ( RSS ). See the roadmap for progress and plans. Is Neovim trying to turn Vim into an IDE? With 30% less source-code than Vim, the vision of Neovim is to enable new applications without compromising Vim's traditional roles. Will Neovim deprecate Vimscript? No. Lua is built-in, but Vimscript will always be supported with the most advanced Vimscript engine in the world (featuring an AST-producing parser ). Which plugins does Neovim support? Most Vim plugins, and more. See related projects for plugins and applications that leverage the Neovim API. Chat Follow @Neovim . Discuss the project at #neovim:matrix.org or #neovim on irc.libera.chat. Contribute code, report bugs and request features at GitHub . Ask about usage and configuration at vi.stackexchange.com . Support Neovim Support the team making Neovim possible! Sponsor Github Sponsors (100% to developers) Open Collective Bountysource Bitcoin 1Evu6wPrzjsjrNPdCYbHy3HT6ry2EzXFyQ View the address at Blockchain.info . Tell others Neovim-logos.zip (1.1 MB) The Neovim logo by Jason Long is licensed under the Creative Commons Attribution 3.0 Unported License .","title":"Home"},{"location":"#features","text":"API is first-class: discoverable , versioned , documented . MessagePack structured communication enables extensions in any language. Remote plugins run as co-processes, safely and asynchronously. GUIs, IDEs, web browsers can --embed Neovim as an editor or script host.","title":"Features"},{"location":"#usable","text":"Strong defaults Works the same everywhere: one build-type, one command Modern terminal features such as cursor styling, focus events, bracketed paste Built-in terminal emulator","title":"Usable"},{"location":"#drop-in-vim","text":"Fully compatible with Vim's editing model and the Vimscript language. Start with :help nvim-from-vim if you already use Vim.","title":"Drop-in vim"},{"location":"#faq","text":"What is the project status? The current stable release version is 0.5 ( RSS ). See the roadmap for progress and plans. Is Neovim trying to turn Vim into an IDE? With 30% less source-code than Vim, the vision of Neovim is to enable new applications without compromising Vim's traditional roles. Will Neovim deprecate Vimscript? No. Lua is built-in, but Vimscript will always be supported with the most advanced Vimscript engine in the world (featuring an AST-producing parser ). Which plugins does Neovim support? Most Vim plugins, and more. See related projects for plugins and applications that leverage the Neovim API.","title":"FAQ"},{"location":"#chat","text":"Follow @Neovim . Discuss the project at #neovim:matrix.org or #neovim on irc.libera.chat. Contribute code, report bugs and request features at GitHub . Ask about usage and configuration at vi.stackexchange.com .","title":"Chat"},{"location":"#support-neovim","text":"Support the team making Neovim possible!","title":"Support Neovim"},{"location":"#sponsor","text":"Github Sponsors (100% to developers) Open Collective Bountysource","title":"Sponsor"},{"location":"#bitcoin","text":"1Evu6wPrzjsjrNPdCYbHy3HT6ry2EzXFyQ View the address at Blockchain.info .","title":"Bitcoin"},{"location":"#tell-others","text":"Neovim-logos.zip (1.1 MB) The Neovim logo by Jason Long is licensed under the Creative Commons Attribution 3.0 Unported License .","title":"Tell others"},{"location":"sponsors/","text":"Sponsors How can I sponsor Neovim? Neovim operates a Bountysource campaign to fund ongoing development. This makes it possible for core developers to work full-time for a month or longer, accelerating projects like Lua integration, the VimL engine, extended marks, embedded terminal, job control, and the RPC API. Who are the current sponsors? Current sponsors are featured in the left column of this page. These are companies or individuals contributing a monthly amount to help support Neovim . How can I list a URL with my sponsor entry? If you're pledging $5/month or more and want to have your URL listed, send a pull request with a new entry for your Bountysource slug in the js/sponsors-override.js file. If you don't have a GitHub account, you can write to the Neovim mailing list . You can obtain your Bountysource slug with the following command: curl --header 'Accept: application/vnd.bountysource+json; version=2' 'https://api.bountysource.com/supporters?team_slug=neovim&per_page=10000&page=1' 2> /dev/null | python -m json.tool | grep -C5 $NAME | grep slug Replace $NAME by your Bountysource display name as shown in the sponsor list. Sponsors list Fundraiser sponsors Thanks to the original fundraiser sponsors!","title":"Sponsors"},{"location":"sponsors/#sponsors","text":"How can I sponsor Neovim? Neovim operates a Bountysource campaign to fund ongoing development. This makes it possible for core developers to work full-time for a month or longer, accelerating projects like Lua integration, the VimL engine, extended marks, embedded terminal, job control, and the RPC API. Who are the current sponsors? Current sponsors are featured in the left column of this page. These are companies or individuals contributing a monthly amount to help support Neovim . How can I list a URL with my sponsor entry? If you're pledging $5/month or more and want to have your URL listed, send a pull request with a new entry for your Bountysource slug in the js/sponsors-override.js file. If you don't have a GitHub account, you can write to the Neovim mailing list . You can obtain your Bountysource slug with the following command: curl --header 'Accept: application/vnd.bountysource+json; version=2' 'https://api.bountysource.com/supporters?team_slug=neovim&per_page=10000&page=1' 2> /dev/null | python -m json.tool | grep -C5 $NAME | grep slug Replace $NAME by your Bountysource display name as shown in the sponsor list.","title":"Sponsors"},{"location":"sponsors/#sponsors-list","text":"","title":"Sponsors list"},{"location":"sponsors/#fundraiser-sponsors","text":"Thanks to the original fundraiser sponsors!","title":"Fundraiser sponsors"},{"location":"about/roadmap/","text":"Roadmap The roadmap defines the project direction. Priorities are tracked by milestones. Version numbers ( 0.1 , 0.2 , 0.2.1 , \u2026) track production releases. The next upcoming version has a target date. backlog holds low-priority items. unplanned holds zero-priority items (no feasible path to completion). Next 0.5 Lua remote plugin host Lua user-config: init.lua Treesitter syntax engine #11724 LSP client for code navigation, refactoring Extended marks (text properties, decorations, virtual text) 0.6 Better file-change detection Future/Long-term Embed Neovim everywhere Externalized UI: window layout events Syntax API: allow clients to query and define syntax groups, text attributes Completed 0.4 Lua \"stdlib\" Externalized UI: multigrid Externalized UI: floating windows Externalized UI: messages 0.3.x API: buffer update events VimL expression parser: nvim_parse_expression() Windows: MSVC support 0.2.1 Built-in Lua: vim.api , :lua , nvim_execute_lua() , \u2026 0.2.1 Externalize UI components: cmdline, wildmenu 0.2.1 Windows :terminal 0.2.1 Pre-packaged \"universal\" binary for Linux 0.2.x Windows support Externalized UI: popumenu Externalized UI: tabline Pre-packaged builds for Windows and macOS 0.1.x First public release Publish a stable product that can be used as a benchmark for progress","title":"Roadmap"},{"location":"about/roadmap/#roadmap","text":"The roadmap defines the project direction. Priorities are tracked by milestones. Version numbers ( 0.1 , 0.2 , 0.2.1 , \u2026) track production releases. The next upcoming version has a target date. backlog holds low-priority items. unplanned holds zero-priority items (no feasible path to completion).","title":"Roadmap"},{"location":"about/roadmap/#next","text":"","title":"Next"},{"location":"about/roadmap/#05","text":"Lua remote plugin host Lua user-config: init.lua Treesitter syntax engine #11724 LSP client for code navigation, refactoring Extended marks (text properties, decorations, virtual text)","title":"0.5"},{"location":"about/roadmap/#06","text":"Better file-change detection Future/Long-term Embed Neovim everywhere Externalized UI: window layout events Syntax API: allow clients to query and define syntax groups, text attributes","title":"0.6"},{"location":"about/roadmap/#completed","text":"","title":"Completed"},{"location":"about/roadmap/#04","text":"Lua \"stdlib\" Externalized UI: multigrid Externalized UI: floating windows Externalized UI: messages","title":"0.4"},{"location":"about/roadmap/#03x","text":"API: buffer update events VimL expression parser: nvim_parse_expression() Windows: MSVC support 0.2.1 Built-in Lua: vim.api , :lua , nvim_execute_lua() , \u2026 0.2.1 Externalize UI components: cmdline, wildmenu 0.2.1 Windows :terminal 0.2.1 Pre-packaged \"universal\" binary for Linux","title":"0.3.x"},{"location":"about/roadmap/#02x","text":"Windows support Externalized UI: popumenu Externalized UI: tabline Pre-packaged builds for Windows and macOS","title":"0.2.x"},{"location":"about/roadmap/#01x","text":"First public release Publish a stable product that can be used as a benchmark for progress","title":"0.1.x"},{"location":"about/screenshots/","text":"Screenshots Disclaimer The following screenshots are taken from possibly unreleased versions of Neovim, to showcase what is possible with a few plugins and lines of configuration: they are not representative of an out of the box experience. Terminal screenshots Custom Start Screen and a fuzzy finder LSP Search with Lspsaga GUI Screenshots Graphical interfaces are not packaged with Neovim. GUIs are not limited by terminal capabilities and can choose to override the rendering of certain neovim elements (cursor, tabline, popup menu, etc). This section showcases only a handful of them, see Neovim's wiki for a list of many of the available GUIs. Treeview and an externalized popup menu in Neovim-qt Nyancat in Uivonim Minimap and externalized window in Goneovim Externalized command mode in GNvim","title":"Screenshots"},{"location":"about/screenshots/#screenshots","text":"Disclaimer The following screenshots are taken from possibly unreleased versions of Neovim, to showcase what is possible with a few plugins and lines of configuration: they are not representative of an out of the box experience.","title":"Screenshots"},{"location":"about/screenshots/#terminal-screenshots","text":"","title":"Terminal screenshots"},{"location":"about/screenshots/#custom-start-screen-and-a-fuzzy-finder","text":"","title":"Custom Start Screen and a fuzzy finder"},{"location":"about/screenshots/#lsp-search-with-lspsaga","text":"","title":"LSP Search with Lspsaga"},{"location":"about/screenshots/#gui-screenshots","text":"Graphical interfaces are not packaged with Neovim. GUIs are not limited by terminal capabilities and can choose to override the rendering of certain neovim elements (cursor, tabline, popup menu, etc). This section showcases only a handful of them, see Neovim's wiki for a list of many of the available GUIs.","title":"GUI Screenshots"},{"location":"about/screenshots/#treeview-and-an-externalized-popup-menu-in-neovim-qt","text":"","title":"Treeview and an externalized popup menu in Neovim-qt"},{"location":"about/screenshots/#nyancat-in-uivonim","text":"","title":"Nyancat in Uivonim"},{"location":"about/screenshots/#minimap-and-externalized-window-in-goneovim","text":"","title":"Minimap and externalized window in Goneovim"},{"location":"about/screenshots/#externalized-command-mode-in-gnvim","text":"","title":"Externalized command mode in GNvim"},{"location":"about/vision/","text":"Vision Neovim is a refactor, and sometimes redactor, in the tradition of Vim (which itself derives from Stevie ). It is not a rewrite but a continuation and extension of Vim. Many clones and derivatives exist, some very clever\u2014but none are Vim. Neovim is built for users who want the good parts of Vim, and more. Goals Enable new contributors , remove barriers to entry. Unblock plugin authors. Develop first-class Lua/LuaJIT scripting alternative to VimL. Target all platforms supported by libuv. Leverage ongoing Vim development. Optimize out of the box , for new users but especially regular users. Deliver consistent cross-platform experience. In matters of taste/ambiguity, favor tradition/compatibility... ...but prefer usability if the benefits are extreme. Non-goals Turn Vim into an IDE Limit third-party applications (such as IDEs!) built with Neovim Deprecate VimL POSIX vi-compatibility Project management Lead maintainer: Justin M. Keyes Maintainers: Neovim team Maintainer notes: MAINTAIN.md","title":"Vision"},{"location":"about/vision/#vision","text":"Neovim is a refactor, and sometimes redactor, in the tradition of Vim (which itself derives from Stevie ). It is not a rewrite but a continuation and extension of Vim. Many clones and derivatives exist, some very clever\u2014but none are Vim. Neovim is built for users who want the good parts of Vim, and more.","title":"Vision"},{"location":"about/vision/#goals","text":"Enable new contributors , remove barriers to entry. Unblock plugin authors. Develop first-class Lua/LuaJIT scripting alternative to VimL. Target all platforms supported by libuv. Leverage ongoing Vim development. Optimize out of the box , for new users but especially regular users. Deliver consistent cross-platform experience. In matters of taste/ambiguity, favor tradition/compatibility... ...but prefer usability if the benefits are extreme.","title":"Goals"},{"location":"about/vision/#non-goals","text":"Turn Vim into an IDE Limit third-party applications (such as IDEs!) built with Neovim Deprecate VimL POSIX vi-compatibility","title":"Non-goals"},{"location":"about/vision/#project-management","text":"Lead maintainer: Justin M. Keyes Maintainers: Neovim team Maintainer notes: MAINTAIN.md","title":"Project management"},{"location":"documentation/general/","text":"Documentation User Install Download an archive or use a package manager . FAQ Check the FAQ and breaking changes for solutions to common issues. The Vim FAQ is also useful. User manual This is the online form of Nvim's :help system. Neovim features are documented at :help nvim-features . :help quickref is a handy cheatsheet. Read :help nvim-from-vim if you already use Vim. Developer :help dev Design constraints and guidelines, for developing Nvim applications or Nvim itself. Developer Wiki Notes on building, navigating, and debugging. Source documentation Generated from source code docstrings. SourceGraph Navigate the Nvim source code online.","title":"General"},{"location":"documentation/general/#documentation","text":"","title":"Documentation"},{"location":"documentation/general/#user","text":"","title":"User"},{"location":"documentation/general/#install","text":"Download an archive or use a package manager .","title":"Install"},{"location":"documentation/general/#faq","text":"Check the FAQ and breaking changes for solutions to common issues. The Vim FAQ is also useful.","title":"FAQ"},{"location":"documentation/general/#user-manual","text":"This is the online form of Nvim's :help system. Neovim features are documented at :help nvim-features . :help quickref is a handy cheatsheet. Read :help nvim-from-vim if you already use Vim.","title":"User manual"},{"location":"documentation/general/#developer","text":"","title":"Developer"},{"location":"documentation/general/#help-dev","text":"Design constraints and guidelines, for developing Nvim applications or Nvim itself.","title":":help dev"},{"location":"documentation/general/#developer-wiki","text":"Notes on building, navigating, and debugging.","title":"Developer Wiki"},{"location":"documentation/general/#source-documentation","text":"Generated from source code docstrings.","title":"Source documentation"},{"location":"documentation/general/#sourcegraph","text":"Navigate the Nvim source code online.","title":"SourceGraph"},{"location":"documentation/lsp/","text":"Language Server Protocol Documentation What is the Language Server Protocol ? Language Server Protocol (LSP) is an open, JSON-RPC-based protocol for communication between source code editors and language servers, which provide programming language-specific features such as: Go to definition (auto)completion Code Actions (automatic formatting, organize imports, ...) Show method signatures Show/go to references Snippets Starting with version 0.5, neovim natively supports this protocol. To enjoy these features, you need to install and configure a LSP server for the languages you are interested in. The neovim organization maintains a list of configurations in the nvim-lspconfig plugin . The repository contains instructions to setup and troubleshoot many servers. How do I configure LSP ? Go to LSP documentation","title":"LSP"},{"location":"documentation/lsp/#language-server-protocol-documentation","text":"","title":"Language Server Protocol Documentation"},{"location":"documentation/lsp/#what-is-the-language-server-protocol","text":"Language Server Protocol (LSP) is an open, JSON-RPC-based protocol for communication between source code editors and language servers, which provide programming language-specific features such as: Go to definition (auto)completion Code Actions (automatic formatting, organize imports, ...) Show method signatures Show/go to references Snippets Starting with version 0.5, neovim natively supports this protocol. To enjoy these features, you need to install and configure a LSP server for the languages you are interested in. The neovim organization maintains a list of configurations in the nvim-lspconfig plugin . The repository contains instructions to setup and troubleshoot many servers.","title":"What is the Language Server Protocol ?"},{"location":"documentation/lsp/#how-do-i-configure-lsp","text":"Go to LSP documentation","title":"How do I configure LSP ?"},{"location":"documentation/lua-resources/","text":"Lua resources Where to look for lua guidance ? Lua support improves with every release. Neovim 0.5 can for instance load its configuration from an init.lua instead of the traditional init.vim. The lua ecosystem around neovim is thrilling and so we list here a few resources to help you get started: A starting guide for lua and neovim This forum post lists several <300 lines of code init.lua and of course the exhaustive :help lua .","title":"Lua resources"},{"location":"documentation/lua-resources/#lua-resources","text":"","title":"Lua resources"},{"location":"documentation/lua-resources/#where-to-look-for-lua-guidance","text":"Lua support improves with every release. Neovim 0.5 can for instance load its configuration from an init.lua instead of the traditional init.vim. The lua ecosystem around neovim is thrilling and so we list here a few resources to help you get started: A starting guide for lua and neovim This forum post lists several <300 lines of code init.lua and of course the exhaustive :help lua .","title":"Where to look for lua guidance ?"},{"location":"documentation/treesitter/","text":"Tree-sitter documentation What is tree-sitter ? Neovim 0.5 adds experimental support for tree-sitter, a tool that serves as a parsing library. Parsing your code into a syntax tree allows for manipulating the structure of your code in a more intelligent way than is currently possible with regular expressions. This allows for improved (and faster): syntax highlighting code navigation refactoring text objects and motions See the tree-sitter official website for more details. The support is experimental but if you feel adventurous, you can use the following plugin to install the language-specific tree-sitter grammars.","title":"Tree-sitter"},{"location":"documentation/treesitter/#tree-sitter-documentation","text":"","title":"Tree-sitter documentation"},{"location":"documentation/treesitter/#what-is-tree-sitter","text":"Neovim 0.5 adds experimental support for tree-sitter, a tool that serves as a parsing library. Parsing your code into a syntax tree allows for manipulating the structure of your code in a more intelligent way than is currently possible with regular expressions. This allows for improved (and faster): syntax highlighting code navigation refactoring text objects and motions See the tree-sitter official website for more details. The support is experimental but if you feel adventurous, you can use the following plugin to install the language-specific tree-sitter grammars.","title":"What is tree-sitter ?"},{"location":"news/","text":"News News","title":"News"},{"location":"news/#news","text":"News","title":"News"},{"location":"news/2014-02-22-Back-Neovim-Through-Bountysource/","text":"Neovim is a project that seeks to aggressively refactor vim source code. The current vim code base is unwieldy and difficult to maintain despite a community of developers wanting to extend and improve it. This project is an effort to clean up the code base and bring vim to the 21st century. Thiago de Arruda is the person who is spearheading this effort. He needs the support of a community excited about Neovim to make this happen. If you can support Neovim through any size of financial contribution, do so at Neovim's Bountysource page . Your coding contributions are also welcome, so feel free to head on over to the Neovim project to submit issues and pull requests.","title":"Back Neovim Through Bountysource"},{"location":"news/2014-06-06-june-newsletter/","text":"Welcome to the first newsletter for Neovim, a project that hopes to give a new beginning to a text editor that we all love. We asked and the support was overwhelming ; the community wanted a newsletter. The plan is to release a newsletter each month to detail the progress and anything else newsworthy for the project. Future newsletters will be released on the first Friday of every month. That makes the next one scheduled for July 4th. Playing Catch Up Let's take a look at some of the milestones of the months preceding May: General News March 20: Neovim.org (now neovim.io) was redesigned and launched. March 23: Fundraiser on Bountysource ended with nearly $34,000 in backing. April 2: Bountysource added the ability to back a team even when not running a fundraiser. April 18: List of BACKERS.md was added for those that backed it. April 29: Justin Keyes was added to the Neovim team to handle management . Development News Imported source code was cleaned up. Legacy system support was removed. CMake is now used for building Neovim. The C code is now written according to the C99 standard . Unit tests have been written for some of the refactored portions of the code. Currently there are around 120 tests (more are needed). Job control code that was originally proposed to Vim was improved and implemented in Neovim. A large portion of the OS specific code has been ported to use libuv . Support was added for making remote procedure calls using the new msgpack API . Abstractions for non-blocking reads/writes were introduced . Some format strings used weren't portable across operating systems. This was addressed in #296 , #490 , #574 . Progress on the newly exposed API has been made. To try it out, check out the test Python client . At 20,000 Feet You may be wondering, \"just how much has changed since it forked from Vim?\" Well, let's look at some Git statistics. Taking into account the initial import of Vim which happened January 31, 2014, there have been 1,010 commits across 77 contributors. This has resulted in: 887 files changed, 575371 insertions(+), 500868 deletions(-) according to git diff --stat . Using a more sophisticated tool such as gitinspector , we can see some more interesting statistics. The entire report of the analysis can be viewed in this Gist . Recent Development Now that we have detailed some of the milestones before the month of May started, we can now look at what has happened in the last month. Removal of Default Feature Macros Neovim has turned on some of the features that were optional in Vim at compile time. This has led to various ifdef FEAT_* macros that are no longer needed. These macros were removed . Removal of Built-in Encryption Discussion arose regarding Neovim's inherited crypto code. It was determined that the crypto code should be removed rather than to provide a possibly insecure implementation. The removal was then promptly handled . Nvim Namespace Due to name collisions with some of Neovim's headers, the source code was moved into a 'nvim' namespace . It was also determined that nvim would be the internal/technical identifier for the project from that point on. Improved Logging Vim did have some logging in place but effort was made to create a better logging utility . The utility uses macros and can log a standard debug message, basic info, a warning message or an error. The logging can be turned on or off depending on if NDEBUG or DISABLE_LOG is defined. Removing Vim Specific Integer Types There are Vim specific types that are used where standard types would be better options. The complete information regarding these types can be found in this guideline . So far short_u , int_u , and long_i types have been removed . long_u removal is currently underway as well with char_u and long types planned for the near future. Out of Memory Errors Rather than check to see if malloc returns a NULL when there isn't enough memory for the allocation, a suite of functions were introduced to handle these out of memory errors. The functions take care of error handling if this ever were to happen. The removal of the checking for out of memory has spanned many issues (and months) and have been listed in this issue . The last removal of the memory errors has almost been completed. Refactor File Functions A function called mch_stat() was used to populate a struct that contained info about a given filename. The struct contained the stat info regarding the file. To increase developer clarity, the code for this was refactored into new functions defined in os/fs.c . The existing calls to mch_stat() were then switched over . Coverity Support Coverity Scan is a service that performs a static analysis on source code to look for defects and vulnerabilities. It can look at multiple paths through execution and find issues that might only arise under certain conditions. Neovim now has a Coverity check that runs multiple times a week in addition to the continuous integration that is used with TravisCI . API Events You can now listen and register for various API events . This is done by using the API channel id when making the request. In addition to this, a Wiki page has been created to detail the current look at the plugin architecture. As the top warns, not all the features have been implemented but take a look at it to learn more. Shape of Things to Come The following is a list of things that are either in progress or on the roadmap. Finish porting the rest of the OS layer to libuv. Continue work on VimL -> Lua translator by @ZyX-I. Use include-what-you-use to clean up headers and includes as discussed . Remove the use of temp files when using system() and use pipes instead . Add the functionality of redraw events . Add Travis builds for OS X . A Note on the VimL to Lua Translator There has been some questioning on the motivation for this feature. The reasoning is that the evaluation of the VimL language is housed in the file called eval.c . The file currently has 19,164 lines of code. By creating the translator, it would remove the need for this evaluator. Instead the Lua code could rely on the newly developed API that would be properly tested. First Release When asked in the mailing list about the progress, Thiago detailed the list of things that's necessary for the first official release : Finish implementation of redraw events <- doing this right now Use the redraw events to implement a new infrastructure for integration tests based on busted/lua. Write a cross-platform GUI program Compatibility layer for old python plugins on top of the python client(except for plugins that use python features introduced in 7.4) Make it compile/run on windows(I dont think this will be hard since a lot of platform-specific stuff already runs on libuv) If there's a volunteer, I'm going to delegate writing the GUI program after I finish implementing redraw events since I'm not very good with designing UIs. Donating If you'd like to help support development, you may donate using Bitcoins here: 1Evu6wPrzjsjrNPdCYbHy3HT6ry2EzXFyQ or back the team on the Neovim Bountysource page. Contributing If you an experienced developer or inexperienced but wanting to learn, visit the GitHub repo and check out the README , CONTRIBUTING guide, and finally the Wiki to learn more. There are plenty of opportunities to help out and plenty of things to do. That's a Wrap Do you have any feedback or suggestions regarding this first newsletter? Feel free to reach out through the Neovim Twitter . Also be sure to subscribe to the [RSS feed][rss] to stay up-to-date on what is happening in the Neovim world. The next newsletter will be released the first Friday of July. Until next time. :wq [rss]: {{ site.news.feed }}","title":"Newsletter #1 - A New Hope"},{"location":"news/2014-06-06-june-newsletter/#playing-catch-up","text":"Let's take a look at some of the milestones of the months preceding May:","title":"Playing Catch Up"},{"location":"news/2014-06-06-june-newsletter/#general-news","text":"March 20: Neovim.org (now neovim.io) was redesigned and launched. March 23: Fundraiser on Bountysource ended with nearly $34,000 in backing. April 2: Bountysource added the ability to back a team even when not running a fundraiser. April 18: List of BACKERS.md was added for those that backed it. April 29: Justin Keyes was added to the Neovim team to handle management .","title":"General News"},{"location":"news/2014-06-06-june-newsletter/#development-news","text":"Imported source code was cleaned up. Legacy system support was removed. CMake is now used for building Neovim. The C code is now written according to the C99 standard . Unit tests have been written for some of the refactored portions of the code. Currently there are around 120 tests (more are needed). Job control code that was originally proposed to Vim was improved and implemented in Neovim. A large portion of the OS specific code has been ported to use libuv . Support was added for making remote procedure calls using the new msgpack API . Abstractions for non-blocking reads/writes were introduced . Some format strings used weren't portable across operating systems. This was addressed in #296 , #490 , #574 . Progress on the newly exposed API has been made. To try it out, check out the test Python client .","title":"Development News"},{"location":"news/2014-06-06-june-newsletter/#at-20000-feet","text":"You may be wondering, \"just how much has changed since it forked from Vim?\" Well, let's look at some Git statistics. Taking into account the initial import of Vim which happened January 31, 2014, there have been 1,010 commits across 77 contributors. This has resulted in: 887 files changed, 575371 insertions(+), 500868 deletions(-) according to git diff --stat . Using a more sophisticated tool such as gitinspector , we can see some more interesting statistics. The entire report of the analysis can be viewed in this Gist .","title":"At 20,000 Feet"},{"location":"news/2014-06-06-june-newsletter/#recent-development","text":"Now that we have detailed some of the milestones before the month of May started, we can now look at what has happened in the last month.","title":"Recent Development"},{"location":"news/2014-06-06-june-newsletter/#removal-of-default-feature-macros","text":"Neovim has turned on some of the features that were optional in Vim at compile time. This has led to various ifdef FEAT_* macros that are no longer needed. These macros were removed .","title":"Removal of Default Feature Macros"},{"location":"news/2014-06-06-june-newsletter/#removal-of-built-in-encryption","text":"Discussion arose regarding Neovim's inherited crypto code. It was determined that the crypto code should be removed rather than to provide a possibly insecure implementation. The removal was then promptly handled .","title":"Removal of Built-in Encryption"},{"location":"news/2014-06-06-june-newsletter/#nvim-namespace","text":"Due to name collisions with some of Neovim's headers, the source code was moved into a 'nvim' namespace . It was also determined that nvim would be the internal/technical identifier for the project from that point on.","title":"Nvim Namespace"},{"location":"news/2014-06-06-june-newsletter/#improved-logging","text":"Vim did have some logging in place but effort was made to create a better logging utility . The utility uses macros and can log a standard debug message, basic info, a warning message or an error. The logging can be turned on or off depending on if NDEBUG or DISABLE_LOG is defined.","title":"Improved Logging"},{"location":"news/2014-06-06-june-newsletter/#removing-vim-specific-integer-types","text":"There are Vim specific types that are used where standard types would be better options. The complete information regarding these types can be found in this guideline . So far short_u , int_u , and long_i types have been removed . long_u removal is currently underway as well with char_u and long types planned for the near future.","title":"Removing Vim Specific Integer Types"},{"location":"news/2014-06-06-june-newsletter/#out-of-memory-errors","text":"Rather than check to see if malloc returns a NULL when there isn't enough memory for the allocation, a suite of functions were introduced to handle these out of memory errors. The functions take care of error handling if this ever were to happen. The removal of the checking for out of memory has spanned many issues (and months) and have been listed in this issue . The last removal of the memory errors has almost been completed.","title":"Out of Memory Errors"},{"location":"news/2014-06-06-june-newsletter/#refactor-file-functions","text":"A function called mch_stat() was used to populate a struct that contained info about a given filename. The struct contained the stat info regarding the file. To increase developer clarity, the code for this was refactored into new functions defined in os/fs.c . The existing calls to mch_stat() were then switched over .","title":"Refactor File Functions"},{"location":"news/2014-06-06-june-newsletter/#coverity-support","text":"Coverity Scan is a service that performs a static analysis on source code to look for defects and vulnerabilities. It can look at multiple paths through execution and find issues that might only arise under certain conditions. Neovim now has a Coverity check that runs multiple times a week in addition to the continuous integration that is used with TravisCI .","title":"Coverity Support"},{"location":"news/2014-06-06-june-newsletter/#api-events","text":"You can now listen and register for various API events . This is done by using the API channel id when making the request. In addition to this, a Wiki page has been created to detail the current look at the plugin architecture. As the top warns, not all the features have been implemented but take a look at it to learn more.","title":"API Events"},{"location":"news/2014-06-06-june-newsletter/#shape-of-things-to-come","text":"The following is a list of things that are either in progress or on the roadmap. Finish porting the rest of the OS layer to libuv. Continue work on VimL -> Lua translator by @ZyX-I. Use include-what-you-use to clean up headers and includes as discussed . Remove the use of temp files when using system() and use pipes instead . Add the functionality of redraw events . Add Travis builds for OS X .","title":"Shape of Things to Come"},{"location":"news/2014-06-06-june-newsletter/#a-note-on-the-viml-to-lua-translator","text":"There has been some questioning on the motivation for this feature. The reasoning is that the evaluation of the VimL language is housed in the file called eval.c . The file currently has 19,164 lines of code. By creating the translator, it would remove the need for this evaluator. Instead the Lua code could rely on the newly developed API that would be properly tested.","title":"A Note on the VimL to Lua Translator"},{"location":"news/2014-06-06-june-newsletter/#first-release","text":"When asked in the mailing list about the progress, Thiago detailed the list of things that's necessary for the first official release : Finish implementation of redraw events <- doing this right now Use the redraw events to implement a new infrastructure for integration tests based on busted/lua. Write a cross-platform GUI program Compatibility layer for old python plugins on top of the python client(except for plugins that use python features introduced in 7.4) Make it compile/run on windows(I dont think this will be hard since a lot of platform-specific stuff already runs on libuv) If there's a volunteer, I'm going to delegate writing the GUI program after I finish implementing redraw events since I'm not very good with designing UIs.","title":"First Release"},{"location":"news/2014-06-06-june-newsletter/#donating","text":"If you'd like to help support development, you may donate using Bitcoins here: 1Evu6wPrzjsjrNPdCYbHy3HT6ry2EzXFyQ or back the team on the Neovim Bountysource page.","title":"Donating"},{"location":"news/2014-06-06-june-newsletter/#contributing","text":"If you an experienced developer or inexperienced but wanting to learn, visit the GitHub repo and check out the README , CONTRIBUTING guide, and finally the Wiki to learn more. There are plenty of opportunities to help out and plenty of things to do.","title":"Contributing"},{"location":"news/2014-06-06-june-newsletter/#thats-a-wrap","text":"Do you have any feedback or suggestions regarding this first newsletter? Feel free to reach out through the Neovim Twitter . Also be sure to subscribe to the [RSS feed][rss] to stay up-to-date on what is happening in the Neovim world. The next newsletter will be released the first Friday of July. Until next time. :wq [rss]: {{ site.news.feed }}","title":"That's a Wrap"},{"location":"news/2014-07-04-july-newsletter/","text":"Welcome to the second monthly newsletter for Neovim, the project that dreams to be the next text editor that we'll all love. General News Colorscheme Contest In the discussion about default Neovim settings , the idea of having a default colorscheme was brought up. A later issue was started to determine what colorscheme would be used. It was decided that a new colorscheme would be great for Neovim. To do this, the Neovim collaborators will create a contest that will allow submissions of colorschemes. After some time, the submissions will close and then a new Poll will be started to let the community pick the winner. The winner(s) will be awarded the prize money and their colorschemes will forever be enshrined in distributions of Neovim. Stay tuned to the Neovim Twitter for when the submission guidelines and process are announced. Development News Clarification of Neovim's License Concern arose over Neovim using Vim's license . While the Vim license still applies to the original Vim code, newly written code wasn't explicitly being addressed and could be relicensed. The community settled on using Apache 2.0 . The license info was then updated and all contributors have been asked to sign a CLA by filling out this document and adding your name to this Wiki page . Note This means that if you've contributed code before the switch to Apache 2.0, your code is still under the old Vim license. It won't become part of Apache 2.0 unless you sign the CLA. Client-side RPC @tarruda finished his implementation that provides a channel_send_call function that allows code to be ran in other scripting engines such as Python, Ruby, and more. As @tarruda notes, the code runs in another process, blocks until the client responds, has a 3 second timeout and has a call stack limit of 20. Various Fixes and Improvements @tarruda opened a pull request that proposed various fixes and improvements to some of his past work. The changes targeted the jobs API, streams API and lastly the events API. All of these past features were discussed in last month's newsletter. These changes included the ability to send large amounts of data through streams, added code for msgpack parsing failures, and an ability to lock onto a set of event sources. Compiling under Windows The ability to build Neovim on Windows has been popular and a target for months . The entire discussion can be viewed in this issue . Recent progress has been made by @equalsraf in his attempt to build Neovim under MinGW . For help building on other platforms, be sure to check out the newly minted Building Neovim page on the Wiki for all things related to compiling. Growable Array Additions Garray.c is a data structure from Vim that provides a \" g rowable array \" to the editor. It has been the target of many pull requests in the past. The latest addition by @philix gives an easier way to append to the array. While garray is still being improved, eventually it will be phased out by a more robust solution. Fixing VimL Libcall A function called mch_libcall() was temporarily removed during some of the cleanup. It is called in Vim by using the libcall() function and is used by some plugins. Discussion started around its temporary removal and how to re-add it to retain compatibility with Vim. @aktau proposed a solution and then created a pull request with the new changes which have since been merged. Continued File Function Refactoring In last month's issue, we talked about the changes to mch_stat calls . This refactoring was continued by @stefan991 to add a new structure that encapsulates st_dev and st_ino of libuv's uv_stat_t . Translations Contributors to Neovim live in countries all over the world. Many native speakers have been busy updating the translations in their native languages. Translations that already have been updated include German and Brazilian Portuguese . With others like Spanish and Swedish in the works. Doxygen Theme @stefan991 customized the Doxygen theme to style it similar to how Neovim.io looks. It was then added to the codebase for future builds. String Handling Effort was made to replace vim_strncpy with strlcpy and it was merged in successfully. However there was a bit of fallout from the changes. In response, @aktau created a master issue to collaborate on the process and discuss the best way forward. To quote @philix, he summed it up best in his comment : String handling is really important in a text editor and the current codebase doesn't have good abstractions for string handling (even though we've been slowly improving it). It's a miracle how much can be accomplished with so little abstraction (and a lot of low level code). Shape of Things to Come Documentation on Neovim.io Neovim's development documentation that is autogenerated by Doxygen is in the process of being moved to the neovim.io domain. In addition to that, the user documentation for Neovim is being moved there as well . To aid in the process, @Marvim, Neovim's newly appointed resident automaton (aka bot), will be configured to automate the process. Just don't talk to him about life . Helping Out Donating If you'd like to help support development, you may donate using Bitcoins here: 1Evu6wPrzjsjrNPdCYbHy3HT6ry2EzXFyQ or back the team on the Neovim Bountysource page. Contributing If you an experienced developer or inexperienced but wanting to learn, visit the GitHub repo and check out the README , CONTRIBUTING guide, and finally the Wiki to learn more. There are plenty of opportunities to help out and plenty of things to do. That's a Wrap Do you have any feedback or suggestions regarding this second newsletter? Feel free to reach out through the Neovim Twitter . Also be sure to subscribe to the [RSS feed][info-rss] to stay up-to-date on what is happening in the Neovim world. The next newsletter will be released around the first Friday of August. Until next time. :wq [info-rss]: {{ site.news.feed }}","title":"Newsletter #2 - Perchance to Dream"},{"location":"news/2014-07-04-july-newsletter/#general-news","text":"","title":"General News"},{"location":"news/2014-07-04-july-newsletter/#colorscheme-contest","text":"In the discussion about default Neovim settings , the idea of having a default colorscheme was brought up. A later issue was started to determine what colorscheme would be used. It was decided that a new colorscheme would be great for Neovim. To do this, the Neovim collaborators will create a contest that will allow submissions of colorschemes. After some time, the submissions will close and then a new Poll will be started to let the community pick the winner. The winner(s) will be awarded the prize money and their colorschemes will forever be enshrined in distributions of Neovim. Stay tuned to the Neovim Twitter for when the submission guidelines and process are announced.","title":"Colorscheme Contest"},{"location":"news/2014-07-04-july-newsletter/#development-news","text":"","title":"Development News"},{"location":"news/2014-07-04-july-newsletter/#clarification-of-neovims-license","text":"Concern arose over Neovim using Vim's license . While the Vim license still applies to the original Vim code, newly written code wasn't explicitly being addressed and could be relicensed. The community settled on using Apache 2.0 . The license info was then updated and all contributors have been asked to sign a CLA by filling out this document and adding your name to this Wiki page .","title":"Clarification of Neovim's License"},{"location":"news/2014-07-04-july-newsletter/#note","text":"This means that if you've contributed code before the switch to Apache 2.0, your code is still under the old Vim license. It won't become part of Apache 2.0 unless you sign the CLA.","title":"Note"},{"location":"news/2014-07-04-july-newsletter/#client-side-rpc","text":"@tarruda finished his implementation that provides a channel_send_call function that allows code to be ran in other scripting engines such as Python, Ruby, and more. As @tarruda notes, the code runs in another process, blocks until the client responds, has a 3 second timeout and has a call stack limit of 20.","title":"Client-side RPC"},{"location":"news/2014-07-04-july-newsletter/#various-fixes-and-improvements","text":"@tarruda opened a pull request that proposed various fixes and improvements to some of his past work. The changes targeted the jobs API, streams API and lastly the events API. All of these past features were discussed in last month's newsletter. These changes included the ability to send large amounts of data through streams, added code for msgpack parsing failures, and an ability to lock onto a set of event sources.","title":"Various Fixes and Improvements"},{"location":"news/2014-07-04-july-newsletter/#compiling-under-windows","text":"The ability to build Neovim on Windows has been popular and a target for months . The entire discussion can be viewed in this issue . Recent progress has been made by @equalsraf in his attempt to build Neovim under MinGW . For help building on other platforms, be sure to check out the newly minted Building Neovim page on the Wiki for all things related to compiling.","title":"Compiling under Windows"},{"location":"news/2014-07-04-july-newsletter/#growable-array-additions","text":"Garray.c is a data structure from Vim that provides a \" g rowable array \" to the editor. It has been the target of many pull requests in the past. The latest addition by @philix gives an easier way to append to the array. While garray is still being improved, eventually it will be phased out by a more robust solution.","title":"Growable Array Additions"},{"location":"news/2014-07-04-july-newsletter/#fixing-viml-libcall","text":"A function called mch_libcall() was temporarily removed during some of the cleanup. It is called in Vim by using the libcall() function and is used by some plugins. Discussion started around its temporary removal and how to re-add it to retain compatibility with Vim. @aktau proposed a solution and then created a pull request with the new changes which have since been merged.","title":"Fixing VimL Libcall"},{"location":"news/2014-07-04-july-newsletter/#continued-file-function-refactoring","text":"In last month's issue, we talked about the changes to mch_stat calls . This refactoring was continued by @stefan991 to add a new structure that encapsulates st_dev and st_ino of libuv's uv_stat_t .","title":"Continued File Function Refactoring"},{"location":"news/2014-07-04-july-newsletter/#translations","text":"Contributors to Neovim live in countries all over the world. Many native speakers have been busy updating the translations in their native languages. Translations that already have been updated include German and Brazilian Portuguese . With others like Spanish and Swedish in the works.","title":"Translations"},{"location":"news/2014-07-04-july-newsletter/#doxygen-theme","text":"@stefan991 customized the Doxygen theme to style it similar to how Neovim.io looks. It was then added to the codebase for future builds.","title":"Doxygen Theme"},{"location":"news/2014-07-04-july-newsletter/#string-handling","text":"Effort was made to replace vim_strncpy with strlcpy and it was merged in successfully. However there was a bit of fallout from the changes. In response, @aktau created a master issue to collaborate on the process and discuss the best way forward. To quote @philix, he summed it up best in his comment : String handling is really important in a text editor and the current codebase doesn't have good abstractions for string handling (even though we've been slowly improving it). It's a miracle how much can be accomplished with so little abstraction (and a lot of low level code).","title":"String Handling"},{"location":"news/2014-07-04-july-newsletter/#shape-of-things-to-come","text":"","title":"Shape of Things to Come"},{"location":"news/2014-07-04-july-newsletter/#documentation-on-neovimio","text":"Neovim's development documentation that is autogenerated by Doxygen is in the process of being moved to the neovim.io domain. In addition to that, the user documentation for Neovim is being moved there as well . To aid in the process, @Marvim, Neovim's newly appointed resident automaton (aka bot), will be configured to automate the process. Just don't talk to him about life .","title":"Documentation on Neovim.io"},{"location":"news/2014-07-04-july-newsletter/#helping-out","text":"","title":"Helping Out"},{"location":"news/2014-07-04-july-newsletter/#donating","text":"If you'd like to help support development, you may donate using Bitcoins here: 1Evu6wPrzjsjrNPdCYbHy3HT6ry2EzXFyQ or back the team on the Neovim Bountysource page.","title":"Donating"},{"location":"news/2014-07-04-july-newsletter/#contributing","text":"If you an experienced developer or inexperienced but wanting to learn, visit the GitHub repo and check out the README , CONTRIBUTING guide, and finally the Wiki to learn more. There are plenty of opportunities to help out and plenty of things to do.","title":"Contributing"},{"location":"news/2014-07-04-july-newsletter/#thats-a-wrap","text":"Do you have any feedback or suggestions regarding this second newsletter? Feel free to reach out through the Neovim Twitter . Also be sure to subscribe to the [RSS feed][info-rss] to stay up-to-date on what is happening in the Neovim world. The next newsletter will be released around the first Friday of August. Until next time. :wq [info-rss]: {{ site.news.feed }}","title":"That's a Wrap"},{"location":"news/2014-09-06-september-newsletter/","text":"Welcome to the third (and delayed) newsletter for Neovim, the project that aims to overhaul the Vim codebase. The next newsletter will be coming out near the beginning of November. It has changed to be every other month as to not overload any sensitive Neovim lovers with too much staggering awe. General News Over 1,000 Issues The Issue tracker on GitHub now has over 1,000 issues/pull requests. The lucky 1000th pull request was opened shortly before August. Documentation Update As mentioned in last July's newsletter, the documentation has successfully been moved to neovim.io/doc/ . It features some general documenation links as well as some more specific reports directed towards developers and contributors. These reports have already helped developers contribute and improve the codebase. Development News In no particular order, here are the top stories in the last two months. Implementing system() with Pipes This issue was mentioned in the June newsletter on things that were yet to come. @aktau has finished implementing the VimL system() function to use pipes and the job system instead of redirecting to temporary files. The change provides a nice speed boost and avoids some permission issues (mainly affecting Windows, which is not supported yet). The slowness of the old implementation of system() was especially noticeable when the called process had large output. An example of this is: system('cat largefile') . Note There has been one bug report concerning the new system() code: it doesn't work well with the Selecta plugin as described here . More Precise Profiling @aktau leveraged libuv's ability to provide a high resolution clock on many systems to improve Neovim's profiling capability with this pull request . The previous implementation was using gettimeofday() . This was a blocker in getting Neovim to run on Windows (as detailed in the previous section) as this function wasn't supported in Windows. For more info on profiling in Vim, just run :help profiling . Dropping of MoonScript During the start of of the project, the MoonScript vs Lua debate was a widely discussed one. MoonScript (a language that compiles to Lua) was chosen to be the language for unit tests. After updating the unit test library, Busted , some unit tests were failing . Thus it was decided to drop the dependency to simplify the tests and remove a layer of abstraction. @tarruda made the accompanying changes and pull request . Msgpack RPC Discussion arose regarding how Neovim wasn't fully compliant with the specification of msgpack-rpc . In the last few weeks, @tarruda has completed the implementation to fully support the specification. He also has been working on upgrading the use of msgpack to the latest version, 2.0, which should be merged soon. Python Client In the first newsletter, a Python client was first discussed. Since then, @tarruda has refactored it for various improvements. Go Client @myitcv has made a proposal for adding Go integration in a similar way that the Python integration works. The proposal also touches on being language agnostic. Although too copious to detail here, the link above also includes more details on implementation and discussion regarding that. More Code Removal More code that was either dead or for unsupported legacy systems was removed in two different pull requests ( 1 , 2 ). The systems that still had code lingering included SGI IRIS , BeOS , and EBCDIC . Cross Platform Temporary Filenames The function to create temporary files in Neovim needed features that weren't in libuv . @Hinidu, one of Neovim's contributors, sent a pull request to libuv to add a new function, uv_fs_mkdtemp . The changes (now part of libuv version 0.11.27 ) are being used by Neovim to provide temporary file/directory creation and the changes work across platforms. Because the cross-plaform code has been contributed to libuv, all libuv-based projects can benefit from the changes. First Bounty Claimed! Back on April 9th, the first bounty on Neovim's Bountysource was created. The request was to port an existing patch that was written by Christian Brabandt from Vim to Neovim. The patch gives a breakindent option that will match the indentation when a line is wrapped. @fmoralesc created a pull request to claim the bounty. A bit of discussion took place and some revisions were made. Since then they have been merged into the master branch and @fmoralesc has been awarded the bounty! More Unit Tests @war1025 has added unit tests for two existing files: buffer.c and fileio.c . Adding more unit test coverage to the code as it is refactored is part of the goal of Neovim. Core Service Providers @tarruda made a pull request that is exposing some of Neovim's core functionality through the msgpack API. While still volatile as it evolves, this core functionality includes: Support functions for external interpreters Accessing/changing the clipboard registers More Python support Embeddability Progress @tarruda has added a --embedded-mode flag which will allow another program to start Neovim in the background and use it as a headless instance. Technically, it uses msgpack-rpc to talk with the client using stdin and stdout. Windows Progress Neovim has successfully been compiled in Microsoft Visual C++ as well as using MinGW , in this issue and this one respectively. Helping Out Donating If you'd like to help support development, you may donate using Bitcoins here: 1Evu6wPrzjsjrNPdCYbHy3HT6ry2EzXFyQ or back the team on the Neovim Bountysource page. Contributing If you an experienced developer or inexperienced but wanting to learn, visit the GitHub repo and check out the README , CONTRIBUTING guide, and finally the Wiki to learn more. There are plenty of opportunities to help out and plenty of things to do. That's a Wrap Do you have any feedback or suggestions regarding this third newsletter? Feel free to reach out through the Neovim Twitter . Also be sure to subscribe to the [RSS feed][info-rss] to stay up-to-date on what is happening in the Neovim world. The next newsletter will be released in two months near the beginning of November. Until next time. :wq [info-rss]: {{ site.news.feed }}","title":"Newsletter #3 - Better Late than Never"},{"location":"news/2014-09-06-september-newsletter/#general-news","text":"","title":"General News"},{"location":"news/2014-09-06-september-newsletter/#over-1000-issues","text":"The Issue tracker on GitHub now has over 1,000 issues/pull requests. The lucky 1000th pull request was opened shortly before August.","title":"Over 1,000 Issues"},{"location":"news/2014-09-06-september-newsletter/#documentation-update","text":"As mentioned in last July's newsletter, the documentation has successfully been moved to neovim.io/doc/ . It features some general documenation links as well as some more specific reports directed towards developers and contributors. These reports have already helped developers contribute and improve the codebase.","title":"Documentation Update"},{"location":"news/2014-09-06-september-newsletter/#development-news","text":"In no particular order, here are the top stories in the last two months.","title":"Development News"},{"location":"news/2014-09-06-september-newsletter/#implementing-system-with-pipes","text":"This issue was mentioned in the June newsletter on things that were yet to come. @aktau has finished implementing the VimL system() function to use pipes and the job system instead of redirecting to temporary files. The change provides a nice speed boost and avoids some permission issues (mainly affecting Windows, which is not supported yet). The slowness of the old implementation of system() was especially noticeable when the called process had large output. An example of this is: system('cat largefile') .","title":"Implementing system() with Pipes"},{"location":"news/2014-09-06-september-newsletter/#note","text":"There has been one bug report concerning the new system() code: it doesn't work well with the Selecta plugin as described here .","title":"Note"},{"location":"news/2014-09-06-september-newsletter/#more-precise-profiling","text":"@aktau leveraged libuv's ability to provide a high resolution clock on many systems to improve Neovim's profiling capability with this pull request . The previous implementation was using gettimeofday() . This was a blocker in getting Neovim to run on Windows (as detailed in the previous section) as this function wasn't supported in Windows. For more info on profiling in Vim, just run :help profiling .","title":"More Precise Profiling"},{"location":"news/2014-09-06-september-newsletter/#dropping-of-moonscript","text":"During the start of of the project, the MoonScript vs Lua debate was a widely discussed one. MoonScript (a language that compiles to Lua) was chosen to be the language for unit tests. After updating the unit test library, Busted , some unit tests were failing . Thus it was decided to drop the dependency to simplify the tests and remove a layer of abstraction. @tarruda made the accompanying changes and pull request .","title":"Dropping of MoonScript"},{"location":"news/2014-09-06-september-newsletter/#msgpack-rpc","text":"Discussion arose regarding how Neovim wasn't fully compliant with the specification of msgpack-rpc . In the last few weeks, @tarruda has completed the implementation to fully support the specification. He also has been working on upgrading the use of msgpack to the latest version, 2.0, which should be merged soon.","title":"Msgpack RPC"},{"location":"news/2014-09-06-september-newsletter/#python-client","text":"In the first newsletter, a Python client was first discussed. Since then, @tarruda has refactored it for various improvements.","title":"Python Client"},{"location":"news/2014-09-06-september-newsletter/#go-client","text":"@myitcv has made a proposal for adding Go integration in a similar way that the Python integration works. The proposal also touches on being language agnostic. Although too copious to detail here, the link above also includes more details on implementation and discussion regarding that.","title":"Go Client"},{"location":"news/2014-09-06-september-newsletter/#more-code-removal","text":"More code that was either dead or for unsupported legacy systems was removed in two different pull requests ( 1 , 2 ). The systems that still had code lingering included SGI IRIS , BeOS , and EBCDIC .","title":"More Code Removal"},{"location":"news/2014-09-06-september-newsletter/#cross-platform-temporary-filenames","text":"The function to create temporary files in Neovim needed features that weren't in libuv . @Hinidu, one of Neovim's contributors, sent a pull request to libuv to add a new function, uv_fs_mkdtemp . The changes (now part of libuv version 0.11.27 ) are being used by Neovim to provide temporary file/directory creation and the changes work across platforms. Because the cross-plaform code has been contributed to libuv, all libuv-based projects can benefit from the changes.","title":"Cross Platform Temporary Filenames"},{"location":"news/2014-09-06-september-newsletter/#first-bounty-claimed","text":"Back on April 9th, the first bounty on Neovim's Bountysource was created. The request was to port an existing patch that was written by Christian Brabandt from Vim to Neovim. The patch gives a breakindent option that will match the indentation when a line is wrapped. @fmoralesc created a pull request to claim the bounty. A bit of discussion took place and some revisions were made. Since then they have been merged into the master branch and @fmoralesc has been awarded the bounty!","title":"First Bounty Claimed!"},{"location":"news/2014-09-06-september-newsletter/#more-unit-tests","text":"@war1025 has added unit tests for two existing files: buffer.c and fileio.c . Adding more unit test coverage to the code as it is refactored is part of the goal of Neovim.","title":"More Unit Tests"},{"location":"news/2014-09-06-september-newsletter/#core-service-providers","text":"@tarruda made a pull request that is exposing some of Neovim's core functionality through the msgpack API. While still volatile as it evolves, this core functionality includes: Support functions for external interpreters Accessing/changing the clipboard registers More Python support","title":"Core Service Providers"},{"location":"news/2014-09-06-september-newsletter/#embeddability-progress","text":"@tarruda has added a --embedded-mode flag which will allow another program to start Neovim in the background and use it as a headless instance. Technically, it uses msgpack-rpc to talk with the client using stdin and stdout.","title":"Embeddability Progress"},{"location":"news/2014-09-06-september-newsletter/#windows-progress","text":"Neovim has successfully been compiled in Microsoft Visual C++ as well as using MinGW , in this issue and this one respectively.","title":"Windows Progress"},{"location":"news/2014-09-06-september-newsletter/#helping-out","text":"","title":"Helping Out"},{"location":"news/2014-09-06-september-newsletter/#donating","text":"If you'd like to help support development, you may donate using Bitcoins here: 1Evu6wPrzjsjrNPdCYbHy3HT6ry2EzXFyQ or back the team on the Neovim Bountysource page.","title":"Donating"},{"location":"news/2014-09-06-september-newsletter/#contributing","text":"If you an experienced developer or inexperienced but wanting to learn, visit the GitHub repo and check out the README , CONTRIBUTING guide, and finally the Wiki to learn more. There are plenty of opportunities to help out and plenty of things to do.","title":"Contributing"},{"location":"news/2014-09-06-september-newsletter/#thats-a-wrap","text":"Do you have any feedback or suggestions regarding this third newsletter? Feel free to reach out through the Neovim Twitter . Also be sure to subscribe to the [RSS feed][info-rss] to stay up-to-date on what is happening in the Neovim world. The next newsletter will be released in two months near the beginning of November. Until next time. :wq [info-rss]: {{ site.news.feed }}","title":"That's a Wrap"},{"location":"news/2014-11-07-november-newsletter/","text":"The way to \"win\" at open source is to be consistent and steady. Welcome to the fourth newsletter for Neovim, the project that aims to overhaul the Vim code base. It also hopes to provide out of the box features yet a more powerful interface for extending the editor. General News Show off your Love You can now add a Neovim sticker to your laptop by heading over to the Neovim section of Unixstickers . Unixstickers will be donating a portion of the profits to ICCF Holland in support of Bram Moolenar's work on Vim. Seeing Stars The last newsletter detailed how Neovim reached 1,000 issues/pull requests on its GitHub repository. During the last two months, the repo reached over 10,000 stargazers on Github. The repository also just tipped over the 100 person contributor mark. Floobits Approved Floobits , a service that integrates with editors to make it easier to write code together, has deprecated its Vim plugin in favor of a plugin for Neovim. Already Floobits says that the new plugin \"has fewer bugs and performs better\" than their previous plugin. Read their entire write up to learn more about their thoughts or view the repository to see the code. VimConf 2014 in Japan Vim-jp held their annual VimConf conference over the weekend of November 8th in Tokyo, Japan. @Shougo, creator of many Vim plugins, gave a talk about his experience and perspective of Neovim so far. Check out the English version of the slides to read his thoughts. Development News Refactored Plugin System @tarruda finished his pull request that did two things. It gave the initial implementation of remote plugins which are going to be plugins that run in external processes and communicate to Nvim through msgpack-rpc. Details can be found in :h remote-plugin . The second change is an improvement to the existing provider infrastructure to allow providers to be implemented in VimScript. This gives more flexibility as previously providers needed to be implemented using msgpack. More details for this can be found in the :h nvim-provider . Note If you run into issues with this new plugin system, it might be caused by stale files from old builds and/or old configurations. See this comment and these two subsequent issues for more details: 1 and 2 . Re-enabling iconv iconv is a library \"for use on systems which don't have one, or whose implementation cannot convert from/to Unicode.\" During the migration to CMake, the macro USE_ICONV was missed which was used to indicate such a system. Thus Neovim never triggered specific encoding conversions when needed. @aktau has an excellent write up called Neovim: input encoding and you which discusses input encoding in detail and as well as how he discovered this issue. He created a pull request which fixed this and it has been merged into the master branch. Removing Vim Specific Integer Types (Part 2) @elmart has returned to continue his past work ( 1 , 2 ) with removing Vim specific integer types in this pull request . This topic was first covered in the very first newsletter back in June. The merging of this latest pull request chips away at the long standing refactoring goal by @tarruda to remove all project specific types . VimL -> Lua and Vim Bug Reports @ZyX-I is still hard at work on advancing his VimL to Lua translator . More than 80% of Vim commands have been implemented in the parser. In the process of writing the translator, he has come across various bugs ( 1 , 2 , 3 , 4 , 5 ). He continues to report them to the vim_dev mailing list as well as contributing patches when possible. Upstream Vim Patches Since the last newsletter, a great number of Vim patches have been merged into Neovim. This work has been done by @splinterofchaos, @Shougo, @mhinz, @NOLFXceptMe, @atwupack, @dkns (sorted by most number of patches ported). You can view the complete status of the Vim patches within the autogenerated Vim Patch Report on the Neovim website. Legacy Test Migration Part 1 After @tarruda opened up a master issue discussing legacy test migration, the first legacy test was migrated over by @nate00. @rainerborene then followed up with a batch of conversions and is already working on the next batch . Previously the legacy tests were ran by launching an instance of Vim with the flag -s <test file> which enables silent mode . This mode reads the lines as if you had typed them. The tests can be ran on nvim by running make oldtest . The migrations (example test: before and after ) are made possible because they are now communicating to Neovim through msgpack-rpc; the same mechanism that UI's will be using when communicating. Bug Fixes Job Activity Bug Fix @splinterofchaos happened to come across a bug in which a job activity's output may become corrupted. The rstream structure could contain incomplete lines if the buffer fills up before reaching a '\\n' character. To remedy this @splinterofchaos added logic at the API level to find a new-line character and return it as well. The end result is that a job's activity is now storing stdout in a list instead of a string. If your code is utilizing a job, you might want to address this. Signs Bug Fix @akkartik uncovered a bug with the sign functionality of Nvim. The sign feature can be used to place an indicator on a given line of a buffer. It will show up on the left side of the editor window. This is used for debuggers, syntax linters, and various other plugins. The bug caused nvim to not remove signs placed across multiple buffers when using the :sign unplace command. @akkartik created a pull request to fix this and also went ahead and updated the CONTRIBUTING.md file to include more guidance on cosmetic changes . Homebrewed Neovim Neovim has moved its homebrew formula into its own repository in the organization to make it easy to install using a tap instead of just a formula. You can install it now with the following: {% highlight bash %} $ brew tap neovim/homebrew-neovim $ brew install --HEAD neovim To see more, just head over to the new repository: neovim/homebrew-neovim . @colinrymer originally suggested the improvement and @xu-cheng helped the testing and migration. Marvim the Bot @Marvim, the Neovim bot that was started by @stefan991, has seen some great improvements by @fwalch. These improvements include: Automatic generation of nightly builds of Neovim Automatically assigning labels to pull requests Ability to manually trigger a Travis build through the command line. Reduced Clang Analyzer Warnings @elmart has been hard at work reducing the number of warnings from the Clang Static Analyzer . He did so in four different pull requests ( 1 , 2 , 3 , 4 ). Helping Out Donating If you'd like to help support development, you may donate using Bitcoins here: 1Evu6wPrzjsjrNPdCYbHy3HT6ry2EzXFyQ or back the team on the Neovim Bountysource page. Contributing If you are an experienced developer or inexperienced but wanting to learn, visit the GitHub repo and check out the README , CONTRIBUTING guide, and finally the Wiki to learn more. There are plenty of opportunities to help out and plenty of things to do. That's a Wrap Do you have any feedback or suggestions regarding this newsletter? Feel free to reach out through the Neovim Twitter . This newsletter cannot cover all of the contributions and support of the community. Thanks to all of the other contributors that have helped in some way during the last two months. Be sure to subscribe to the [RSS feed][info-rss] to stay up-to-date on what is happening in the Neovim world. The next newsletter will be released in roughly two months near the beginning months of the next year. Until next time. :wq [info-rss]: {{ site.news.feed }}","title":"Newsletter #4 - Thanksvimming Day"},{"location":"news/2014-11-07-november-newsletter/#general-news","text":"","title":"General News"},{"location":"news/2014-11-07-november-newsletter/#show-off-your-love","text":"You can now add a Neovim sticker to your laptop by heading over to the Neovim section of Unixstickers . Unixstickers will be donating a portion of the profits to ICCF Holland in support of Bram Moolenar's work on Vim.","title":"Show off your Love"},{"location":"news/2014-11-07-november-newsletter/#seeing-stars","text":"The last newsletter detailed how Neovim reached 1,000 issues/pull requests on its GitHub repository. During the last two months, the repo reached over 10,000 stargazers on Github. The repository also just tipped over the 100 person contributor mark.","title":"Seeing Stars"},{"location":"news/2014-11-07-november-newsletter/#floobits-approved","text":"Floobits , a service that integrates with editors to make it easier to write code together, has deprecated its Vim plugin in favor of a plugin for Neovim. Already Floobits says that the new plugin \"has fewer bugs and performs better\" than their previous plugin. Read their entire write up to learn more about their thoughts or view the repository to see the code.","title":"Floobits Approved"},{"location":"news/2014-11-07-november-newsletter/#vimconf-2014-in-japan","text":"Vim-jp held their annual VimConf conference over the weekend of November 8th in Tokyo, Japan. @Shougo, creator of many Vim plugins, gave a talk about his experience and perspective of Neovim so far. Check out the English version of the slides to read his thoughts.","title":"VimConf 2014 in Japan"},{"location":"news/2014-11-07-november-newsletter/#development-news","text":"","title":"Development News"},{"location":"news/2014-11-07-november-newsletter/#refactored-plugin-system","text":"@tarruda finished his pull request that did two things. It gave the initial implementation of remote plugins which are going to be plugins that run in external processes and communicate to Nvim through msgpack-rpc. Details can be found in :h remote-plugin . The second change is an improvement to the existing provider infrastructure to allow providers to be implemented in VimScript. This gives more flexibility as previously providers needed to be implemented using msgpack. More details for this can be found in the :h nvim-provider .","title":"Refactored Plugin System"},{"location":"news/2014-11-07-november-newsletter/#note","text":"If you run into issues with this new plugin system, it might be caused by stale files from old builds and/or old configurations. See this comment and these two subsequent issues for more details: 1 and 2 .","title":"Note"},{"location":"news/2014-11-07-november-newsletter/#re-enabling-iconv","text":"iconv is a library \"for use on systems which don't have one, or whose implementation cannot convert from/to Unicode.\" During the migration to CMake, the macro USE_ICONV was missed which was used to indicate such a system. Thus Neovim never triggered specific encoding conversions when needed. @aktau has an excellent write up called Neovim: input encoding and you which discusses input encoding in detail and as well as how he discovered this issue. He created a pull request which fixed this and it has been merged into the master branch.","title":"Re-enabling iconv"},{"location":"news/2014-11-07-november-newsletter/#removing-vim-specific-integer-types-part-2","text":"@elmart has returned to continue his past work ( 1 , 2 ) with removing Vim specific integer types in this pull request . This topic was first covered in the very first newsletter back in June. The merging of this latest pull request chips away at the long standing refactoring goal by @tarruda to remove all project specific types .","title":"Removing Vim Specific Integer Types (Part 2)"},{"location":"news/2014-11-07-november-newsletter/#viml-lua-and-vim-bug-reports","text":"@ZyX-I is still hard at work on advancing his VimL to Lua translator . More than 80% of Vim commands have been implemented in the parser. In the process of writing the translator, he has come across various bugs ( 1 , 2 , 3 , 4 , 5 ). He continues to report them to the vim_dev mailing list as well as contributing patches when possible.","title":"VimL -&gt; Lua and Vim Bug Reports"},{"location":"news/2014-11-07-november-newsletter/#upstream-vim-patches","text":"Since the last newsletter, a great number of Vim patches have been merged into Neovim. This work has been done by @splinterofchaos, @Shougo, @mhinz, @NOLFXceptMe, @atwupack, @dkns (sorted by most number of patches ported). You can view the complete status of the Vim patches within the autogenerated Vim Patch Report on the Neovim website.","title":"Upstream Vim Patches"},{"location":"news/2014-11-07-november-newsletter/#legacy-test-migration-part-1","text":"After @tarruda opened up a master issue discussing legacy test migration, the first legacy test was migrated over by @nate00. @rainerborene then followed up with a batch of conversions and is already working on the next batch . Previously the legacy tests were ran by launching an instance of Vim with the flag -s <test file> which enables silent mode . This mode reads the lines as if you had typed them. The tests can be ran on nvim by running make oldtest . The migrations (example test: before and after ) are made possible because they are now communicating to Neovim through msgpack-rpc; the same mechanism that UI's will be using when communicating.","title":"Legacy Test Migration Part 1"},{"location":"news/2014-11-07-november-newsletter/#bug-fixes","text":"","title":"Bug Fixes"},{"location":"news/2014-11-07-november-newsletter/#job-activity-bug-fix","text":"@splinterofchaos happened to come across a bug in which a job activity's output may become corrupted. The rstream structure could contain incomplete lines if the buffer fills up before reaching a '\\n' character. To remedy this @splinterofchaos added logic at the API level to find a new-line character and return it as well. The end result is that a job's activity is now storing stdout in a list instead of a string. If your code is utilizing a job, you might want to address this.","title":"Job Activity Bug Fix"},{"location":"news/2014-11-07-november-newsletter/#signs-bug-fix","text":"@akkartik uncovered a bug with the sign functionality of Nvim. The sign feature can be used to place an indicator on a given line of a buffer. It will show up on the left side of the editor window. This is used for debuggers, syntax linters, and various other plugins. The bug caused nvim to not remove signs placed across multiple buffers when using the :sign unplace command. @akkartik created a pull request to fix this and also went ahead and updated the CONTRIBUTING.md file to include more guidance on cosmetic changes .","title":"Signs Bug Fix"},{"location":"news/2014-11-07-november-newsletter/#homebrewed-neovim","text":"Neovim has moved its homebrew formula into its own repository in the organization to make it easy to install using a tap instead of just a formula. You can install it now with the following: {% highlight bash %} $ brew tap neovim/homebrew-neovim $ brew install --HEAD neovim To see more, just head over to the new repository: neovim/homebrew-neovim . @colinrymer originally suggested the improvement and @xu-cheng helped the testing and migration.","title":"Homebrewed Neovim"},{"location":"news/2014-11-07-november-newsletter/#marvim-the-bot","text":"@Marvim, the Neovim bot that was started by @stefan991, has seen some great improvements by @fwalch. These improvements include: Automatic generation of nightly builds of Neovim Automatically assigning labels to pull requests Ability to manually trigger a Travis build through the command line.","title":"Marvim the Bot"},{"location":"news/2014-11-07-november-newsletter/#reduced-clang-analyzer-warnings","text":"@elmart has been hard at work reducing the number of warnings from the Clang Static Analyzer . He did so in four different pull requests ( 1 , 2 , 3 , 4 ).","title":"Reduced Clang Analyzer Warnings"},{"location":"news/2014-11-07-november-newsletter/#helping-out","text":"","title":"Helping Out"},{"location":"news/2014-11-07-november-newsletter/#donating","text":"If you'd like to help support development, you may donate using Bitcoins here: 1Evu6wPrzjsjrNPdCYbHy3HT6ry2EzXFyQ or back the team on the Neovim Bountysource page.","title":"Donating"},{"location":"news/2014-11-07-november-newsletter/#contributing","text":"If you are an experienced developer or inexperienced but wanting to learn, visit the GitHub repo and check out the README , CONTRIBUTING guide, and finally the Wiki to learn more. There are plenty of opportunities to help out and plenty of things to do.","title":"Contributing"},{"location":"news/2014-11-07-november-newsletter/#thats-a-wrap","text":"Do you have any feedback or suggestions regarding this newsletter? Feel free to reach out through the Neovim Twitter . This newsletter cannot cover all of the contributions and support of the community. Thanks to all of the other contributors that have helped in some way during the last two months. Be sure to subscribe to the [RSS feed][info-rss] to stay up-to-date on what is happening in the Neovim world. The next newsletter will be released in roughly two months near the beginning months of the next year. Until next time. :wq [info-rss]: {{ site.news.feed }}","title":"That's a Wrap"},{"location":"news/2015-04-03-newsletter/","text":"Outstanding communication and handling of bugs from Neovim. Exemplary FOSS project in my experience so far. @telemachus Welcome to the fifth newsletter for Neovim, the project that looks to become Vim out of the box . General News Gitter.im for Neovim Now in addition to the mailing list and IRC channel, you can hop into the Neovim chat room provided through Gitter.im . It has a convenient web interface but also allows you to connect using your favorite IRC client . Black Duck 2014 Open Source Rookie Black Duck , a company that helps other corporations in the adoption of open source software, chose Neovim as one of the projects to feature this past year. The company annually recognizes some of the top new open source projects that started during the year. ICCF Holland Donations As mentioned in the last newsletter, Unixstickers has added Neovim stickers to their inventory. Every sticker that is bought increases the amount donated to ICCF Holland , Bram Moolenaar's charity. Since they've been added, USD 106 has been raised which Unixstickers just donated on March 24th. Related Projects The Neovim Wiki contains a page titled Related projects that contains a list of current GUI projects, API clients, plugins that take advantage of Neovim features, and projects with direct support for Neovim. Some of the projects might be experimental which means there might be bugs and the projects might still be in progress. Do you know of another project that can be listed? Don't be afraid to add a link yourself! Development News Terminal UI (TUI) @tarruda has merged his pull request to reimplement the terminal user interface using libtermkey and unibilium . Libtermkey is a library by @leonerd that \"allows easy processing of keyboard entry from terminal-based programs.\" It has the ability to handle special keys, UTF-8 combining and more. Unibilium is a library by @mauke that interfaces with terminfo . Terminfo is a library and database that makes it easy to interface with display terminals without worrying about device specific details. More details can be found on the man page for terminfo by running: man 5 terminfo . Although the TUI implementation is included as part of Neovim, it is architecturally decoupled from the editor core: it uses the same API as external clients and GUIs. Additional Keybindings As a result of using libtermkey, Neovim can now bind meta keys and Ctrl-Shift combinations both of which weren't previously possible in the terminal. Be sure to read more about the updated binding capabilities for additional examples and possibilities. Builtin Terminal Emulation @tarruda has finished his pull request adding a new :terminal command which when ran launches a full terminal emulator. The terminal is using Neovim's native buffers and windows which means the user can enter normal mode by pressing <C-\\><C-n> . This is meant to replace and provide more capabilities than the already existing Vim command, :shell , which has been removed from Neovim. More explanation on the decision of this feature can be found in this comment made by @tarruda. The complete documentation for this feature can be found under :help nvim-terminal-emulator . This feature is implemented using another of @leonerd's projects called libvterm . True Colors With the changes to the TUI described above, this allowed @tarruda to make a pull request to add true colors to supporting terminals. A more detailed explanation of what true colors means as well as terminals that support it can be found in this Gist that was written by @XVilka. To enable true color support, set the environment variable NVIM_TUI_ENABLE_TRUE_COLOR . Windows Build The progress of building Neovim on Windows was first detailed in the July 2014 newsletter. In a huge milestone, @equalsraf has been able to build Neovim on Windows and also has a build on AppVeyor , a continuous delivery service specifically for Windows. @equalsraf has provided detailed notes on the requirements, building the dependencies/Neovim, and known errors. Going forward, @equalsraf is still working on his main pull request while @justinmk has started a new issue for collecting requirements and discussion. Special Interfaces Cleaning Vim has a number of ways to start it through its many aliases. The complete list can be found under the starting section in Vim's documentation. @Pyrohh opened an issue to discuss the removal of such aliases. All of the aliases had corresponding flags that could be used instead. After some discussion it was decided to remove the lesser used ones. @Pyrohh then made a pull request to remove the following: ex : Ex mode. exim : \"Improved\" Ex mode. view : Read-only mode. gvim : Using the GUI. gex : GUI and in Ex mode. gview : GUI and in read-only mode. rvim : Restricted mode. rview : Read-only and in restricted mode. rgvim : GUI and in restricted mode. rgview : GUI, read-only, and in restricted mode. In addition, @Pyrohh made another pull request to merge vimdiff and vim -d . Removal of \"Easy Mode\" @fmoralesc also opened a pull request to remove evim . Which given by the docs says it starts in insert mode which allows it to act like a normal editor. Even with removing of the feature, emulating it is still possible by using the underlying 'insertmode' option that easy mode leveraged. State of the GUI The graphical side of Neovim has been seeing some changes in addition to the terminal interface in one of the above section. Since the last newsletter, the following projects in no particular order have been created: SolidOak by @oakes: \"a simple IDE for Rust\" that embeds Neovim to provide text editing functionality. Visit the website for the IDE for more details and binaries. Neovim.app by @rogual: an OS X friendly editor with mouse support, tabs, clipboards, and more. vim-mode by @carlosdcastillo: an in progress Atom package that uses Neovim for binding and manipulating text. Take a look at this video to see it. python-client by @tarruda: which in addition to being a Python library for communicating with Neovim, also contains an interface using GTK . neovim.as by @coolwanglu: an application that uses Atom Shell . A video of it in action can be seen here . New Tab Events Three new autocommand events have been added by @fmoralesc in this pull request . An autocommand event is a way to execute something in response to a particular event. Events are particularly useful in plugins. The new events are: TabNew , TabNewEntered , and TabClosed . Major Change to Improve Job API @tarruda is continuing to refine the new job API. His work has continued in this latest pull request . This might be a breaking change for existing plugins that use the existing job API. This improvement is to make use of function callbacks (for input, output events) instead of the previous way of using autocommands for responding to events. In addition to that, there are more job control functions in VimL including jobwait() and jobclose() . So Long long_u In an epic crusade against Vim specific integer types that has spanned two previous newsletters (June and November), @elmart has finished removing the integer type long_u . @elmart's changes were broken up into three last pull requests ( 1 , 2 , 3 ). This is a step towards @tarruda's goal to remove all project specific types . All that remains is char_u in which there are ~12,300 occurrences currently in use. Adding a EndOfBuffer Highlight Group @mhinz wanted a way to remove ~ after the file ends . He proposed a new :highlight group, called EndOfBuffer , to go with the current list of groups . His proposal was first sent as a patch to vim-dev where his changes were accepted by Bram and should make it into Vim in the future. @mhinz let @fmoralesc prepare the pull request to bring in the changes to Neovim. The pull request has since been merged into the master branch. Garbage Collection Performance When using Vim with plugins that allocate a large number of objects there are times when the garbage collection will kick in and cause Vim to hang due to the time spent looking for objects to free. This issue was posted to vim_dev by Yasuhiro Matsumoto. A patch as written by Ariya Mizutani and proposed to the mailing list which improves the algorithm for looking through the objects. In Yasuhiro's test case, it took unpatched Vim 100 seconds to execute but took just 0.134 seconds when the patch was applied. An issue by @Shougo was created to discuss this patch being applied to Neovim. @oni-link then created a pull request to apply the patch which was merged shortly after. Vimexpect and Example GDB Plugin @tarruda created a small Vimscript library in a pull request that mimics Tcl's Expect for Neovim. The purpose of Expect (in Tcl) is to make it easy to script and automate text based applications that don't provide that functionality. @tarruda provided an example plugin for GDB as a proof of concept. The plugin was created to make it easier to develop Neovim and show the vimexpect possibilities. Options Updates Removal of compatible Vim has a compatible option which lets Vim be more compatible with Vi. It can also be started by running vim -C . In December, @klusark made a pull request to change nocompatible , which turns on no compatibility mode with Vi, to always be set. This means that set nocompatible and the flag -N are non-operations. This also means that since there isn't a compatible mode, if you run set compatible it will give an error. Removal of edcompatible An issue was created to discuss the removal of the edcompatible option. Turning on this feature gives special behavior for the g and c flags for the :substitute command. Vim's documentation actually discourage the use of this option. @Pyrohh created a pull request to remove the feature and it was merged into the master branch. Removal of ttyfast Vim has an option called ttyfast which is set if there exists a \"fast terminal connection\". When set, it will send more characters to be drawn instead of using insert/delete line commands. Discussion started and it was agreed that the option should be set as the default back in August. Shortly after, @fornwall created a pull request to make it the default. After a few months of it being the default and no issues arising, @Pyrohh created a pull request to remove it completely. Simpler Handling of Always-on/Always-off Options Since the following three options were removed and more might follow, @fwalch created a pull request to simplify how these always-on/always-off options are handled. Upstream Vim Patches Neovim continues to merge in the upstream Vim patches that are submitted to the Vim mailing list. Since the last newsletter, more than 60 pull requests worth of patches have been submitted to Neovim. The current status of all the patches can be found on the Vim patch report . Helping Out Donating If you'd like to help support development, you may donate using Bitcoins here: 1Evu6wPrzjsjrNPdCYbHy3HT6ry2EzXFyQ or back the team on the Neovim Bountysource page. Contributing If you are an experienced developer or inexperienced but wanting to learn, visit the GitHub repo and check out the README , CONTRIBUTING guide, and finally the Wiki to learn more. There are plenty of opportunities to help out and plenty of things to do. That's a Wrap Do you have any feedback or suggestions regarding this newsletter? Feel free to reach out through the Neovim Twitter . This newsletter cannot cover all of the contributions and support of the community. Thanks to all of the other contributors that have helped in some way during the months since the last newsletter. Be sure to subscribe to the [RSS feed][info-rss] to stay up-to-date on what is happening in the Neovim world. The next newsletter will be released in a few months time. Until next time. :wq [info-rss]: {{ site.news.feed }}","title":"Newsletter #5 - Out of the Box"},{"location":"news/2015-04-03-newsletter/#general-news","text":"","title":"General News"},{"location":"news/2015-04-03-newsletter/#gitterim-for-neovim","text":"Now in addition to the mailing list and IRC channel, you can hop into the Neovim chat room provided through Gitter.im . It has a convenient web interface but also allows you to connect using your favorite IRC client .","title":"Gitter.im for Neovim"},{"location":"news/2015-04-03-newsletter/#black-duck-2014-open-source-rookie","text":"Black Duck , a company that helps other corporations in the adoption of open source software, chose Neovim as one of the projects to feature this past year. The company annually recognizes some of the top new open source projects that started during the year.","title":"Black Duck 2014 Open Source Rookie"},{"location":"news/2015-04-03-newsletter/#iccf-holland-donations","text":"As mentioned in the last newsletter, Unixstickers has added Neovim stickers to their inventory. Every sticker that is bought increases the amount donated to ICCF Holland , Bram Moolenaar's charity. Since they've been added, USD 106 has been raised which Unixstickers just donated on March 24th.","title":"ICCF Holland Donations"},{"location":"news/2015-04-03-newsletter/#related-projects","text":"The Neovim Wiki contains a page titled Related projects that contains a list of current GUI projects, API clients, plugins that take advantage of Neovim features, and projects with direct support for Neovim. Some of the projects might be experimental which means there might be bugs and the projects might still be in progress. Do you know of another project that can be listed? Don't be afraid to add a link yourself!","title":"Related Projects"},{"location":"news/2015-04-03-newsletter/#development-news","text":"","title":"Development News"},{"location":"news/2015-04-03-newsletter/#terminal-ui-tui","text":"@tarruda has merged his pull request to reimplement the terminal user interface using libtermkey and unibilium . Libtermkey is a library by @leonerd that \"allows easy processing of keyboard entry from terminal-based programs.\" It has the ability to handle special keys, UTF-8 combining and more. Unibilium is a library by @mauke that interfaces with terminfo . Terminfo is a library and database that makes it easy to interface with display terminals without worrying about device specific details. More details can be found on the man page for terminfo by running: man 5 terminfo . Although the TUI implementation is included as part of Neovim, it is architecturally decoupled from the editor core: it uses the same API as external clients and GUIs.","title":"Terminal UI (TUI)"},{"location":"news/2015-04-03-newsletter/#additional-keybindings","text":"As a result of using libtermkey, Neovim can now bind meta keys and Ctrl-Shift combinations both of which weren't previously possible in the terminal. Be sure to read more about the updated binding capabilities for additional examples and possibilities.","title":"Additional Keybindings"},{"location":"news/2015-04-03-newsletter/#builtin-terminal-emulation","text":"@tarruda has finished his pull request adding a new :terminal command which when ran launches a full terminal emulator. The terminal is using Neovim's native buffers and windows which means the user can enter normal mode by pressing <C-\\><C-n> . This is meant to replace and provide more capabilities than the already existing Vim command, :shell , which has been removed from Neovim. More explanation on the decision of this feature can be found in this comment made by @tarruda. The complete documentation for this feature can be found under :help nvim-terminal-emulator . This feature is implemented using another of @leonerd's projects called libvterm .","title":"Builtin Terminal Emulation"},{"location":"news/2015-04-03-newsletter/#true-colors","text":"With the changes to the TUI described above, this allowed @tarruda to make a pull request to add true colors to supporting terminals. A more detailed explanation of what true colors means as well as terminals that support it can be found in this Gist that was written by @XVilka. To enable true color support, set the environment variable NVIM_TUI_ENABLE_TRUE_COLOR .","title":"True Colors"},{"location":"news/2015-04-03-newsletter/#windows-build","text":"The progress of building Neovim on Windows was first detailed in the July 2014 newsletter. In a huge milestone, @equalsraf has been able to build Neovim on Windows and also has a build on AppVeyor , a continuous delivery service specifically for Windows. @equalsraf has provided detailed notes on the requirements, building the dependencies/Neovim, and known errors. Going forward, @equalsraf is still working on his main pull request while @justinmk has started a new issue for collecting requirements and discussion.","title":"Windows Build"},{"location":"news/2015-04-03-newsletter/#special-interfaces-cleaning","text":"Vim has a number of ways to start it through its many aliases. The complete list can be found under the starting section in Vim's documentation. @Pyrohh opened an issue to discuss the removal of such aliases. All of the aliases had corresponding flags that could be used instead. After some discussion it was decided to remove the lesser used ones. @Pyrohh then made a pull request to remove the following: ex : Ex mode. exim : \"Improved\" Ex mode. view : Read-only mode. gvim : Using the GUI. gex : GUI and in Ex mode. gview : GUI and in read-only mode. rvim : Restricted mode. rview : Read-only and in restricted mode. rgvim : GUI and in restricted mode. rgview : GUI, read-only, and in restricted mode. In addition, @Pyrohh made another pull request to merge vimdiff and vim -d .","title":"Special Interfaces Cleaning"},{"location":"news/2015-04-03-newsletter/#removal-of-easy-mode","text":"@fmoralesc also opened a pull request to remove evim . Which given by the docs says it starts in insert mode which allows it to act like a normal editor. Even with removing of the feature, emulating it is still possible by using the underlying 'insertmode' option that easy mode leveraged.","title":"Removal of \"Easy Mode\""},{"location":"news/2015-04-03-newsletter/#state-of-the-gui","text":"The graphical side of Neovim has been seeing some changes in addition to the terminal interface in one of the above section. Since the last newsletter, the following projects in no particular order have been created: SolidOak by @oakes: \"a simple IDE for Rust\" that embeds Neovim to provide text editing functionality. Visit the website for the IDE for more details and binaries. Neovim.app by @rogual: an OS X friendly editor with mouse support, tabs, clipboards, and more. vim-mode by @carlosdcastillo: an in progress Atom package that uses Neovim for binding and manipulating text. Take a look at this video to see it. python-client by @tarruda: which in addition to being a Python library for communicating with Neovim, also contains an interface using GTK . neovim.as by @coolwanglu: an application that uses Atom Shell . A video of it in action can be seen here .","title":"State of the GUI"},{"location":"news/2015-04-03-newsletter/#new-tab-events","text":"Three new autocommand events have been added by @fmoralesc in this pull request . An autocommand event is a way to execute something in response to a particular event. Events are particularly useful in plugins. The new events are: TabNew , TabNewEntered , and TabClosed .","title":"New Tab Events"},{"location":"news/2015-04-03-newsletter/#major-change-to-improve-job-api","text":"@tarruda is continuing to refine the new job API. His work has continued in this latest pull request . This might be a breaking change for existing plugins that use the existing job API. This improvement is to make use of function callbacks (for input, output events) instead of the previous way of using autocommands for responding to events. In addition to that, there are more job control functions in VimL including jobwait() and jobclose() .","title":"Major Change to Improve Job API"},{"location":"news/2015-04-03-newsletter/#so-long-long_u","text":"In an epic crusade against Vim specific integer types that has spanned two previous newsletters (June and November), @elmart has finished removing the integer type long_u . @elmart's changes were broken up into three last pull requests ( 1 , 2 , 3 ). This is a step towards @tarruda's goal to remove all project specific types . All that remains is char_u in which there are ~12,300 occurrences currently in use.","title":"So Long long_u"},{"location":"news/2015-04-03-newsletter/#adding-a-endofbuffer-highlight-group","text":"@mhinz wanted a way to remove ~ after the file ends . He proposed a new :highlight group, called EndOfBuffer , to go with the current list of groups . His proposal was first sent as a patch to vim-dev where his changes were accepted by Bram and should make it into Vim in the future. @mhinz let @fmoralesc prepare the pull request to bring in the changes to Neovim. The pull request has since been merged into the master branch.","title":"Adding a EndOfBuffer Highlight Group"},{"location":"news/2015-04-03-newsletter/#garbage-collection-performance","text":"When using Vim with plugins that allocate a large number of objects there are times when the garbage collection will kick in and cause Vim to hang due to the time spent looking for objects to free. This issue was posted to vim_dev by Yasuhiro Matsumoto. A patch as written by Ariya Mizutani and proposed to the mailing list which improves the algorithm for looking through the objects. In Yasuhiro's test case, it took unpatched Vim 100 seconds to execute but took just 0.134 seconds when the patch was applied. An issue by @Shougo was created to discuss this patch being applied to Neovim. @oni-link then created a pull request to apply the patch which was merged shortly after.","title":"Garbage Collection Performance"},{"location":"news/2015-04-03-newsletter/#vimexpect-and-example-gdb-plugin","text":"@tarruda created a small Vimscript library in a pull request that mimics Tcl's Expect for Neovim. The purpose of Expect (in Tcl) is to make it easy to script and automate text based applications that don't provide that functionality. @tarruda provided an example plugin for GDB as a proof of concept. The plugin was created to make it easier to develop Neovim and show the vimexpect possibilities.","title":"Vimexpect and Example GDB Plugin"},{"location":"news/2015-04-03-newsletter/#options-updates","text":"","title":"Options Updates"},{"location":"news/2015-04-03-newsletter/#removal-of-compatible","text":"Vim has a compatible option which lets Vim be more compatible with Vi. It can also be started by running vim -C . In December, @klusark made a pull request to change nocompatible , which turns on no compatibility mode with Vi, to always be set. This means that set nocompatible and the flag -N are non-operations. This also means that since there isn't a compatible mode, if you run set compatible it will give an error.","title":"Removal of compatible"},{"location":"news/2015-04-03-newsletter/#removal-of-edcompatible","text":"An issue was created to discuss the removal of the edcompatible option. Turning on this feature gives special behavior for the g and c flags for the :substitute command. Vim's documentation actually discourage the use of this option. @Pyrohh created a pull request to remove the feature and it was merged into the master branch.","title":"Removal of edcompatible"},{"location":"news/2015-04-03-newsletter/#removal-of-ttyfast","text":"Vim has an option called ttyfast which is set if there exists a \"fast terminal connection\". When set, it will send more characters to be drawn instead of using insert/delete line commands. Discussion started and it was agreed that the option should be set as the default back in August. Shortly after, @fornwall created a pull request to make it the default. After a few months of it being the default and no issues arising, @Pyrohh created a pull request to remove it completely.","title":"Removal of ttyfast"},{"location":"news/2015-04-03-newsletter/#simpler-handling-of-always-onalways-off-options","text":"Since the following three options were removed and more might follow, @fwalch created a pull request to simplify how these always-on/always-off options are handled.","title":"Simpler Handling of Always-on/Always-off Options"},{"location":"news/2015-04-03-newsletter/#upstream-vim-patches","text":"Neovim continues to merge in the upstream Vim patches that are submitted to the Vim mailing list. Since the last newsletter, more than 60 pull requests worth of patches have been submitted to Neovim. The current status of all the patches can be found on the Vim patch report .","title":"Upstream Vim Patches"},{"location":"news/2015-04-03-newsletter/#helping-out","text":"","title":"Helping Out"},{"location":"news/2015-04-03-newsletter/#donating","text":"If you'd like to help support development, you may donate using Bitcoins here: 1Evu6wPrzjsjrNPdCYbHy3HT6ry2EzXFyQ or back the team on the Neovim Bountysource page.","title":"Donating"},{"location":"news/2015-04-03-newsletter/#contributing","text":"If you are an experienced developer or inexperienced but wanting to learn, visit the GitHub repo and check out the README , CONTRIBUTING guide, and finally the Wiki to learn more. There are plenty of opportunities to help out and plenty of things to do.","title":"Contributing"},{"location":"news/2015-04-03-newsletter/#thats-a-wrap","text":"Do you have any feedback or suggestions regarding this newsletter? Feel free to reach out through the Neovim Twitter . This newsletter cannot cover all of the contributions and support of the community. Thanks to all of the other contributors that have helped in some way during the months since the last newsletter. Be sure to subscribe to the [RSS feed][info-rss] to stay up-to-date on what is happening in the Neovim world. The next newsletter will be released in a few months time. Until next time. :wq [info-rss]: {{ site.news.feed }}","title":"That's a Wrap"},{"location":"news/2015-12-09-newsletter/","text":"Welcome to the sixth newsletter for Neovim, a project that aims to improve Vim by adding new features and wrap it all in a nice, modern face. Introduction Hi, this is @tarruda and I will be addressing the Neovim community directly in this newsletter. Other than that, I will try to keep it structured as @jdavis did previously. Let's get started! General News 0.1 release Neovim now has its first public release! A few months ago, @justinmk created the 0.1 milestone which greatly helped us focus on more urgent tasks that resulted in the first release. We planned many features not yet available in 0.1, but decided to postpone them for future milestones, which will be more frequent after this newsletter. This illustrates the path Neovim will take from now on: Instead of preparing big releases that take forever to happen, we'll focus on smaller, frequent and more stable releases. The 0.1 release is basically just a tag for users looking to compile Neovim in a version that has a minimum level of stability, but future releases may also contain precompiled binaries and even installers (when Windows is officially supported). Neovim 0.1.0 and 0.1.1 are already available in the releases page and for Homebrew/Linuxbrew and Arch Linux . Check the installation page on the Neovim Wiki for more possibilities to install Neovim (although, at the time of writing, most of these will install the latest development version of Neovim instead of a 0.1.x release). For those that prefer(or need) to compile manually from git, the build instructions still work as usual. Bountysource salt campaign For those who don't know yet, Bountysource launched a new platform that allows open source projects to obtain sustainable crowdfunding. This platform is conveniently called \"salt\" , and Neovim was one of the first projects to use it. The first campaign was very successful and raised about $35,000, which allowed me to work full-time on Neovim for roughly 6 months. Being very enthusiastic about the project and unable to meet all goals in those months, I continued to dedicate a very significant portion of my time to Neovim, so much that it started hurting my personal and professional life. This continued until February when I saw that I simply couldn't continue with my old pace. Around that time that @rappo offered me to test the salt platform beta version and I saw it as a way to continue my work on Neovim. Like it's predecessor, the salt campaign was very successful and allowed me to continue Neovim contributions (in a healthy way) for the past 8 months, thank you! Building Neovim from source Did we ever mention how easy it is to build and install Neovim from source? While it has a good number of dependencies, the build system automatically downloads and builds everything without cluttering your system. Check out the installation page on the Neovim Wiki for the exact steps. Development News XDG Support Neovim now follows the XDG directory specification . This was proposed by @ZyX-I when the project started, but only a couple of months ago we received a PR from @Yamakaky which was superseded by @jck in a later PR and again by @ZyX-I in a final PR that was merged recently. Since following the XDG directory specification, Neovim now looks for user configuration files such as .nvimrc and those under ~/.nvim in the ~/.config directory, which can be overriden by the $XDG_CONFIG_HOME environment variable. The specification also states that cache files should be stored in a separate directory ( ~/.local/share ), which is where files like viminfo (now ShaDa) or backup/swap can optionally go. This change makes it simpler for users to backup and manage their configuration since it will be stored with other programs that also follow the specification, not to mention it keeps the home directory cleaner. Step by step instructions on how to migrate existing configuration can be found at :h nvim-from-vim . ShaDa (Shared Data) @ZyX-I major ShaDa PR was merged. It completely replaced the viminfo file for storing user data such as register contents, command history, variables, jump list and so on. A known problem with viminfo is that two Vim instances running concurrently will override each other's data. ShaDa is a new storage format created by @ZyX-I that not only fixes the problem but also brings a number of enhancements to Neovim: File format that: Supports forward (ShaDa files from newer Neovim can be used by older versions) and backward (ShaDa files from older versions can be used by newer ones without problems) compatibility, making ShaDa files future-proof to a great extent. Supports hierarchical data structures, giving Neovim lot of flexibility in serializing any kind of information. Is based on msgpack and explicitly standardized in documentation which allows creation of plugins/tools that perform arbitrary manipulations. Assumes no state stored between data pieces inside the file, which makes such tools simpler and allows such manipulations as \u201cto concatenate two ShaDa files from different Neovim instances simply use cat 1.shada 2.shada > joined.shada , Neovim will handle this properly when reading\u201d. Uses expanded paths(/home instead of ~/). Embedded timestamps that allow multiple Neovim instances to correctly merge their data when writing or reading ShaDa files. Forward compatibility includes Neovim core code that preserves additional information found in ShaDa files generated by newer Neovim versions in case they provide any. While the PR is very big, @ZyX-I has taken care of adding great test coverage. Great work @ZyX-I! Wrapping the event loop layer It's no secret that libuv is the event loop library used by Neovim, and it is what makes it possible for us to implement features that require asynchronous communication (not initiated by the user) with the editor with ease. Unfortunately due to how Neovim code is currently organized, integrating libuv was not a trivial task. The basic idea is that Neovim receives arbitrary events when it is polling for user input, but these events can't be processed immediately because Neovim can be in a state that simply can't handle arbitrary actions. So if Neovim receives an event while checking user input, it will put the event in a queue for later processing. One example is illustrated in the following scenario: Neovim checks if the user typed ctrl+c while the regexp engine is executing, but it can't process the event as it is received because it may want to execute vimscript that calls the regexp engine again, and the engine is not reentrant since it relies heavily on global variables. So it has to postpone the event for when it's safe, and determining when it's safe to process events is itself another problem. Another complication of integrating with libuv is that sometimes Neovim must only process events from a certain source. For example, while Neovim is sending a msgpack-rpc call, it should only process events that come from: the user (eg: ctrl+c to interrupt the call) the file descriptor that received the msgpack-rpc call (which can be from a child process stdio from a socket) To allow this kind of selective event processing, Neovim must maintain multiple queues that integrate with each other, and the logic to do this is very repetitive. In one of my latest PRs , some libuv \"classes\" were wrapped in a way that makes managing these queues much easier. jemalloc jemalloc , a high performance general purpose memory allocator, is now used by default. Since Neovim makes heavy use of dynamic queues (see above) in its inner loops, malloc(3) is called a lot more than Vim, so it is important to use a fast implementation that has consistent performance across platforms. In a recent PR , @fmoralesc modified the jemalloc version used by our build system to target jemalloc 4.0 which brings even more performance enhancements and adds support for more platforms. Faster travis builds We now use Travis container-based insfrastructure to run Neovim builds, which makes CI builds to start immediately. This was implemented by @fwalch, which also did many other improvements to our build infrastructure, allowing developers to receive much faster feedback when submitting PRs. Quickbuild @jszakmeister is running a quickbuild server in his own infrastructure. This gives us a backup CI that double checks Neovim PRs, also running tests in FreeBSD which is not covered by travis. Thank you for improving Neovim robustness @jszakmeister! Third-party development Neomake Did you know that there is an alternative to syntastic that makes use of Neovim asynchronous capabilities? Neomake is the best plugin for syntatic checking on Neovim: It is extensible like syntastic and the fact that it uses job-control allows it to perform checking in background without blocking the user interface. This is very useful for compiled languages that are slower to check (typescript, java, .NET). The migration from syntastic is also very trivial, great work @benekastah! FZF fzf is a command-line fuzzy finder that thanks to its author (@junegunn, the same developer behind vim-plug ), has great Neovim support through a plugin that uses our builtin terminal emulator . FZF is a great alternative to plugins like ctrlp : It is really fast and has the advantage of running in another process, which can make use of multi-core systems and doesn't block Neovim user interface. To see how fast and responsive it is, just try running :FZF to search for files on the linux source tree! Besides fzf , the user is also encouraged to install fzf.vim , a plugin that exposes some very useful commands that are implemented on top of fzf. Deoplete @Shougo has created deoplete.nvim , an asynchronous completion engine written as a remote-plugin that makes use of Neovim async capabilities to allow completions to be computed without blocking the user interface. He decided to write a new plugin from the scratch because Neovim doesn't support the lua interface required for neocomplete. @Shougo is the sith lord of Vim plugins, here's a list containing some of his previous work: neocomplete neocomplcache vimshell unite neobundle The community can expect great things from deoplete.nvim ! (Recently @Shougo posted a slide to explain the ideas behind deoplete.) Neoterm Neoterm is a plugin for easily running tests in a terminal window . It was written by @kassio and supports the following test libraries: rspec cucumber minitest go-lang test nose Very useful @kassio!","title":"Newsletter #6 - Ship it!"},{"location":"news/2015-12-09-newsletter/#introduction","text":"Hi, this is @tarruda and I will be addressing the Neovim community directly in this newsletter. Other than that, I will try to keep it structured as @jdavis did previously. Let's get started!","title":"Introduction"},{"location":"news/2015-12-09-newsletter/#general-news","text":"","title":"General News"},{"location":"news/2015-12-09-newsletter/#01-release","text":"Neovim now has its first public release! A few months ago, @justinmk created the 0.1 milestone which greatly helped us focus on more urgent tasks that resulted in the first release. We planned many features not yet available in 0.1, but decided to postpone them for future milestones, which will be more frequent after this newsletter. This illustrates the path Neovim will take from now on: Instead of preparing big releases that take forever to happen, we'll focus on smaller, frequent and more stable releases. The 0.1 release is basically just a tag for users looking to compile Neovim in a version that has a minimum level of stability, but future releases may also contain precompiled binaries and even installers (when Windows is officially supported). Neovim 0.1.0 and 0.1.1 are already available in the releases page and for Homebrew/Linuxbrew and Arch Linux . Check the installation page on the Neovim Wiki for more possibilities to install Neovim (although, at the time of writing, most of these will install the latest development version of Neovim instead of a 0.1.x release). For those that prefer(or need) to compile manually from git, the build instructions still work as usual.","title":"0.1 release"},{"location":"news/2015-12-09-newsletter/#bountysource-salt-campaign","text":"For those who don't know yet, Bountysource launched a new platform that allows open source projects to obtain sustainable crowdfunding. This platform is conveniently called \"salt\" , and Neovim was one of the first projects to use it. The first campaign was very successful and raised about $35,000, which allowed me to work full-time on Neovim for roughly 6 months. Being very enthusiastic about the project and unable to meet all goals in those months, I continued to dedicate a very significant portion of my time to Neovim, so much that it started hurting my personal and professional life. This continued until February when I saw that I simply couldn't continue with my old pace. Around that time that @rappo offered me to test the salt platform beta version and I saw it as a way to continue my work on Neovim. Like it's predecessor, the salt campaign was very successful and allowed me to continue Neovim contributions (in a healthy way) for the past 8 months, thank you!","title":"Bountysource salt campaign"},{"location":"news/2015-12-09-newsletter/#building-neovim-from-source","text":"Did we ever mention how easy it is to build and install Neovim from source? While it has a good number of dependencies, the build system automatically downloads and builds everything without cluttering your system. Check out the installation page on the Neovim Wiki for the exact steps.","title":"Building Neovim from source"},{"location":"news/2015-12-09-newsletter/#development-news","text":"","title":"Development News"},{"location":"news/2015-12-09-newsletter/#xdg-support","text":"Neovim now follows the XDG directory specification . This was proposed by @ZyX-I when the project started, but only a couple of months ago we received a PR from @Yamakaky which was superseded by @jck in a later PR and again by @ZyX-I in a final PR that was merged recently. Since following the XDG directory specification, Neovim now looks for user configuration files such as .nvimrc and those under ~/.nvim in the ~/.config directory, which can be overriden by the $XDG_CONFIG_HOME environment variable. The specification also states that cache files should be stored in a separate directory ( ~/.local/share ), which is where files like viminfo (now ShaDa) or backup/swap can optionally go. This change makes it simpler for users to backup and manage their configuration since it will be stored with other programs that also follow the specification, not to mention it keeps the home directory cleaner. Step by step instructions on how to migrate existing configuration can be found at :h nvim-from-vim .","title":"XDG Support"},{"location":"news/2015-12-09-newsletter/#shada-shared-data","text":"@ZyX-I major ShaDa PR was merged. It completely replaced the viminfo file for storing user data such as register contents, command history, variables, jump list and so on. A known problem with viminfo is that two Vim instances running concurrently will override each other's data. ShaDa is a new storage format created by @ZyX-I that not only fixes the problem but also brings a number of enhancements to Neovim: File format that: Supports forward (ShaDa files from newer Neovim can be used by older versions) and backward (ShaDa files from older versions can be used by newer ones without problems) compatibility, making ShaDa files future-proof to a great extent. Supports hierarchical data structures, giving Neovim lot of flexibility in serializing any kind of information. Is based on msgpack and explicitly standardized in documentation which allows creation of plugins/tools that perform arbitrary manipulations. Assumes no state stored between data pieces inside the file, which makes such tools simpler and allows such manipulations as \u201cto concatenate two ShaDa files from different Neovim instances simply use cat 1.shada 2.shada > joined.shada , Neovim will handle this properly when reading\u201d. Uses expanded paths(/home instead of ~/). Embedded timestamps that allow multiple Neovim instances to correctly merge their data when writing or reading ShaDa files. Forward compatibility includes Neovim core code that preserves additional information found in ShaDa files generated by newer Neovim versions in case they provide any. While the PR is very big, @ZyX-I has taken care of adding great test coverage. Great work @ZyX-I!","title":"ShaDa (Shared Data)"},{"location":"news/2015-12-09-newsletter/#wrapping-the-event-loop-layer","text":"It's no secret that libuv is the event loop library used by Neovim, and it is what makes it possible for us to implement features that require asynchronous communication (not initiated by the user) with the editor with ease. Unfortunately due to how Neovim code is currently organized, integrating libuv was not a trivial task. The basic idea is that Neovim receives arbitrary events when it is polling for user input, but these events can't be processed immediately because Neovim can be in a state that simply can't handle arbitrary actions. So if Neovim receives an event while checking user input, it will put the event in a queue for later processing. One example is illustrated in the following scenario: Neovim checks if the user typed ctrl+c while the regexp engine is executing, but it can't process the event as it is received because it may want to execute vimscript that calls the regexp engine again, and the engine is not reentrant since it relies heavily on global variables. So it has to postpone the event for when it's safe, and determining when it's safe to process events is itself another problem. Another complication of integrating with libuv is that sometimes Neovim must only process events from a certain source. For example, while Neovim is sending a msgpack-rpc call, it should only process events that come from: the user (eg: ctrl+c to interrupt the call) the file descriptor that received the msgpack-rpc call (which can be from a child process stdio from a socket) To allow this kind of selective event processing, Neovim must maintain multiple queues that integrate with each other, and the logic to do this is very repetitive. In one of my latest PRs , some libuv \"classes\" were wrapped in a way that makes managing these queues much easier.","title":"Wrapping the event loop layer"},{"location":"news/2015-12-09-newsletter/#jemalloc","text":"jemalloc , a high performance general purpose memory allocator, is now used by default. Since Neovim makes heavy use of dynamic queues (see above) in its inner loops, malloc(3) is called a lot more than Vim, so it is important to use a fast implementation that has consistent performance across platforms. In a recent PR , @fmoralesc modified the jemalloc version used by our build system to target jemalloc 4.0 which brings even more performance enhancements and adds support for more platforms.","title":"jemalloc"},{"location":"news/2015-12-09-newsletter/#faster-travis-builds","text":"We now use Travis container-based insfrastructure to run Neovim builds, which makes CI builds to start immediately. This was implemented by @fwalch, which also did many other improvements to our build infrastructure, allowing developers to receive much faster feedback when submitting PRs.","title":"Faster travis builds"},{"location":"news/2015-12-09-newsletter/#quickbuild","text":"@jszakmeister is running a quickbuild server in his own infrastructure. This gives us a backup CI that double checks Neovim PRs, also running tests in FreeBSD which is not covered by travis. Thank you for improving Neovim robustness @jszakmeister!","title":"Quickbuild"},{"location":"news/2015-12-09-newsletter/#third-party-development","text":"","title":"Third-party development"},{"location":"news/2015-12-09-newsletter/#neomake","text":"Did you know that there is an alternative to syntastic that makes use of Neovim asynchronous capabilities? Neomake is the best plugin for syntatic checking on Neovim: It is extensible like syntastic and the fact that it uses job-control allows it to perform checking in background without blocking the user interface. This is very useful for compiled languages that are slower to check (typescript, java, .NET). The migration from syntastic is also very trivial, great work @benekastah!","title":"Neomake"},{"location":"news/2015-12-09-newsletter/#fzf","text":"fzf is a command-line fuzzy finder that thanks to its author (@junegunn, the same developer behind vim-plug ), has great Neovim support through a plugin that uses our builtin terminal emulator . FZF is a great alternative to plugins like ctrlp : It is really fast and has the advantage of running in another process, which can make use of multi-core systems and doesn't block Neovim user interface. To see how fast and responsive it is, just try running :FZF to search for files on the linux source tree! Besides fzf , the user is also encouraged to install fzf.vim , a plugin that exposes some very useful commands that are implemented on top of fzf.","title":"FZF"},{"location":"news/2015-12-09-newsletter/#deoplete","text":"@Shougo has created deoplete.nvim , an asynchronous completion engine written as a remote-plugin that makes use of Neovim async capabilities to allow completions to be computed without blocking the user interface. He decided to write a new plugin from the scratch because Neovim doesn't support the lua interface required for neocomplete. @Shougo is the sith lord of Vim plugins, here's a list containing some of his previous work: neocomplete neocomplcache vimshell unite neobundle The community can expect great things from deoplete.nvim ! (Recently @Shougo posted a slide to explain the ideas behind deoplete.)","title":"Deoplete"},{"location":"news/2015-12-09-newsletter/#neoterm","text":"Neoterm is a plugin for easily running tests in a terminal window . It was written by @kassio and supports the following test libraries: rspec cucumber minitest go-lang test nose Very useful @kassio!","title":"Neoterm"},{"location":"news/2016-11-01-newsletter/","text":"It's time for the Neovim newsletter! Skip to the Fun and Features sections if you only care about new features. There are also changes in project management that you should know about. What is Neovim? Each minute, a new text editor is born (source: Hacker News). There are endless text editors that address the \"common case\". Instead of another Vim-like text editor, Neovim users want a better Vim. Thousands of small decisions live in the Vim core, accumulated over decades; most of those decisions are still relevant, solving subtle problems that new projects have yet to encounter, digest and decide. Neovim is a refactor of Vim to make it viable for another 30 years of hacking. See :help vim-differences for a reference of changes and improvements. Should I switch? Neovim very intentionally builds on the long history of Vim community knowledge and user habits. That means \"switching\" from Vim to Neovim is just an \"upgrade\" \u2014like installing a new version of Vim. If you log onto a server or workstation with only Vim, you won't be lost. If you find an article about Vim, it likely also applies to Neovim, unless it's about :smile . So if you like Vim, try Neovim. If you love Vim, try this ;) Hacking... or plain old Engineering From the start, one of Neovim's explicit goals has been: Simplify maintenance and encourage contributions We want a hackable Vim : a codebase and community that enables experimentation and low-cost trials of new features. And there's evidence of real progress towards that ambition. We've successfully executed non-trivial \"off-the-roadmap\" patches: features which are important to their authors, but not the highest priority for the project. :tchdir enables tab-local \"working directory\" 'statusline' supports unlimited alignment sections ( PR #4489 ) TextYankPost event makes it trivial to implement a reliable yank ring , send yanks to an external service, and applications we didn't anticipate QuickFixLine is a new highlight group man.vim offers completion, improved highlighting, and more These patches were included because they: fit into existing conventions/design included robust test coverage (enabled by an advanced test framework and CI) received thoughtful review by other contributors They are casually mentioned in :help nvim-features :) Fun without :smile ? New clients and innovative applications are appearing more frequently than ever. NyaoVim is a thoughtfully-designed, modular Electron GUI . Its <neovim-editor> web component can be used in your own project , including VS Code, Atom, and other Electron or nw.js projects! ONI is an Electron-based Neovim IDE showing many exciting possiblities. It also has a cool logo like NyaoVim :) Users love deoplete , the first non-blocking auto-completion plugin for vim. @qvacua turned his sights to nvim , progressing rapidly on a new nvim -based backend for his well-known VimR project, a polished GUI for macOS . There are pre-built .app bundles for macOS 10.11 at the releases page. The cross-platform neovim-qt GUI continues to get better: it's as fast as gVim, with less flicker, and it doesn't depend GTK/KDE. neovim.app is a macOS Neovim GUI available via homebrew for macOS 10.9+. nvim-hs is a host to enable writing Neovim plugins in Haskell . Check out cl-neovim for authoring Neovim lisp plugins . Includes :Lispdo ! nvr now supports the Vim \"clientserver\" options --servername , --remote , etc. nvr is perfect for communicating with a parent nvim instance from a :terminal buffer. Intero users are joyful about intero.nvim and intero-neovim There are clients for go, julia, perl, Java, R, Elixir, Clojure, and more. Visit the related projects wiki page to discover new projects as they emerge! Project management Clarity and consistency breed contribution. \u2014 @robertmeta Benevolent Dictator For a Limited time In July, Thiago (@tarruda) took a less active role in the project, for personal reasons. He hopes to resume active contributions in the future. Some have asked for a \"BDFL\" to be named. @justinmk has that role, unless you want it: we've made steps to document the role of maintainer, so that anyone trusted by most contributors can step up in the future. The ultimate goal is to spread out tasks as horizontally as possible, and to continue to give the \"commit bit\" to people we've grown to trust. There are currently 14 core contributors; we'd like to scale that to 50. We don't want the project to depend on heroic effort, but a flow of interested parties working within the conventions and etiquette of the Vim community. Funding The (ongoing) successful funding campaign yielded libmpack , :terminal , and major refactors and improvements (e.g. decoupling the UI logic from the TUI). With Thiago taking a less active role in the project, the funding is available to other developers. @ZyX-I , a prolific committer to Neovim (21 kLOC contributed) and Vim ( 13 kLOC , including if_python ), agreed to take the role of \"lead developer\", i.e. the developer who receives the funding. His work on Neovim includes: first-class XDG support, shada, build-time generators, automated change-aware linter, Lua-to-VimL translator critical internals such as msgpackparse() and os/fileio.c (buffered I/O) complete rewrite of Vim JSON support, including granular error messages comprehensive test coverage for all of the above The funding does not always go to one person. It's available to any core contributor who wants to take a month or more to focus on Neovim. Donations Because funding is monthly, it is (hopefully) a low-friction decision: To donate $10, you could pledge $1 per month. If the project makes you rage, just cancel your pledge. If the project makes you happy (despite the lack of :smile , somehow), let the pledge continue! API The Neovim API is one of the defining technical and \"soft\" features of the project. In PR #5535 we formed a strategy for growing the API without breaking clients . We established the API Level concept, to enable trivial comparison and emphasize that the API version is separate from the Neovim version. We added version and deprecation fields to the API metadata. We'll never break API function signatures published in a tagged release. We won't remove deprecated API functions until Neovim version 2.0 (if ever). The API should only grow , not break. Each API function is marked by the API level where it first became available. This makes it practical for the numerous Neovim API clients to support any released version of Neovim. Since PR #4934 you can call the API of the current nvim process directly from VimL : :echo nvim_buf_get_lines(42, 1, 3, v:false) Try :call nvim_<Tab> at the command line to see the available API functions, or install the nvim-api-viewer plugin to see a nice overview of available API functions. We take API reliability seriously, and we've tried to think carefully about the design. Feedback from plugin and client authors is appreciated! Release strategy Versioning One year ago we announced our first release, 0.1 . We've streamlined the release process (versioning, tagging, changelogs, announcements). Some users wonder if 0.1 means Neovim is unstable. Each release since 0.1 is considered stable for use on all systems except Windows. Windows will be a first-class target starting with 0.2 . Until 1.0 , some non-API features may break backwards compatibility. This is uncommon, and these cases are always documented . In 0.1.6 we introduced API versioning . Clients can dynamically decide which functions to use. We follow semver ; the recommendations there explain the intention of the 0.x series. OS Packages More OS packages are appearing. Neovim is part of Debian's next release ! Special thanks to @jamessan (Debian maintainer and Neovim contributor), @fwalch and others who build packages for their favorite systems and work with us to address inevitable compiler/platform quirks. Progress What did Neovim contributors accomplish since 2014? By a conservative estimate at least 20,000 new lines of C code have been written. We've written 2200 new tests, in addition to passing Vim's own test suite. 273 different people have contributed to the core project. The core project has more commits in 3 years than Vim in 12 years. Besides major refactoring and feature work, a ton of time was put into the Neovim continuous integration (CI) system. In a stable but fragile C codebase, maintainers tend to ignore \"small\" features because they may be too risky. CI reduces fragility so we can welcome feature work large and small , instead of fearing change. New features can be tested rigorously with screen tests . For example, here's a test that exercises the 'wildmode' UI behavior: describe(\"'wildmenu'\", function() it(':sign <tab> shows wildmenu completions', function() execute('set wildmode=full') execute('set wildmenu') feed(':sign <tab>') screen:expect([[ | ~ | ~ | define jump list > | :sign define^ | ]]) end) end) After we forked Vim in 2014, there was an unstable period; that gap has become smaller and smaller, and will vanish in 2017. Each regression fix is covered by integration tests. Each pull request builds against 12 different environments. Special thanks to @jszakmeister, @fwalch and @ZyX-I for their work on the build system, and to @oni-link for fixing some very difficult bugs. Little things matter One of the strongest impressions from social media is that people really appreciate less friction when they try Neovim. Defaults matter. Tim Pope deserves credit for curating many of the defaults we chose. @fmoralesc and others thought carefully about how to implement these defaults without causing regressions ( encoding=utf8 and syntax/filetype were tricky). The work was tedious, but justified: it's a one-time cost that helps new users, old users on new systems (which are everywhere these days: VMs, containers, servers...), and all users by propagating Vim \"best practices\". Features Here are some new developments since the last newsletter. Ruby support landed in 0.1.5. This means you can write Neovim plugins in ruby and the legacy Vim :ruby* commands are supported (so existing Vim+ruby plugins work in Neovim, such as Command-t and vim-github-dashboard). To enable Ruby support, just gem install neovim . You don't need to worry about compiling against a specific version. Write plugins in Go with the Neovim API Go client ! (Thanks to @garyburd!) :CheckHealth detects common problems (like Homebrew's doctor ). Run it whenever you install or upgrade Neovim. buffer-local highlighting ( :help api-highlights ) is similar to matchaddpos() , with some key differences: it is associated with a buffer and adapts to line insertions and deletions . Useful for linter or semantic highlighter plugins that monitor a buffer for changes and compute highlights in the background. Externalized UI Widgets In PR #4432 @bfredl made the first step to give UIs more control over the display of \"widgets\". @romgrk quickly made a proof of concept . It didn't take long for an ambitious patch to externalize cmdline, tab, wildmenu, and preview window widgets . The demo shows exciting potential: This work was possible because @tarruda cleanly separated the terminal-UI (TUI) from the internal screen, so even the built-in TUI is driven by UI events like any other externalized UI. Incremental (\"live\") :substitute In May 2016 a group of students mentored by Eric Burel contacted us about contributing to Neovim. From a list of ideas we provided, they decided to implement a \"live preview\" for :substitute . We merged it in PR #5561 , released in 0.1.7 . Set the inccommand option to try it: :set inccommand=split This feature was made possible by our development model: despite having \"no time\" for a side-project, we outlined the basic idea, the students made decisions out-of-band, and we provided clarification as needed. The students posted a PR to allow ongoing feedback. The PR fork was updated regularly, so reviewers could pull, build, and test. Tests were written using screen tests , helping coverity/ASan/etc to exercise the feature and reviewers to visualize the behavior . The automated build system continuously ran the changes against 12 different systems. Eric wrote about the experience . Thanks to Eric, the students at ENSIMAG, @KillTheMule , and @bfredl for carrying this feature to a conclusion we are proud of. Upcoming Look for the following developments in 2017 for Neovim 0.3 . We will ship Lua as a default scripting alternative in 2017. The next \"inflection point\" of reduced-risk, rapid enhancement is to make the core extensible with Lua. For that PR #4411 is an important step. With ZyX's eval.c refactor the monolithic eval.c will be separated into modules , marking a point where Neovim's VimL implementation diverges from Vim's. This will be the world's second alternative VimL implementation (ZyX's VimL-to-Lua PR was the first). Extended marks will give plugin authors more powerful and flexible marks. We will take a close look at the Microsoft Language Server Implementation to decide how it and similar middleware can integrate elegantly with Neovim. EOF So that was 2016 for Neovim. Could 2017 be the Year of the Neovim Desktop? Neovim's ideas are finding their way into other projects, such as Xi editor and Vim itself, which has seen more activity this year than any other year in its history . There's a beehive of activity in the gitter and IRC channels (which are bridged by matrix thanks to @leonerd!). Visit us to talk about the project. And don't forget there's a roadmap at neovim.io if you want to check where the project is headed. Thanks for reading. \u2014Justin M. Keyes (@justinmk) note1 $ git log --grep='\\([zZ]y[xX]\\)\\|\\([nN]ikolai [pP]av\\)\\|\\([nN]ikolay [pP]av\\)' --numstat --pretty=tformat: --numstat|gawk '{ add += $1; subs += $2; loc += $1 - $2 } END { printf \"added lines: %s removed lines: %s total lines: %s\\n\", add, subs, loc }' added lines: 22590 removed lines: 8620 total lines: 13970 $ git log --grep='[cC]hristian [bB]rab' --numstat --pretty=tformat: --numstat|gawk '{ add += $1; subs += $2; loc += $1 - $2 } END { printf \"added lines: %s removed lines: %s total lines: %s\\n\", add, subs, loc }' added lines: 10000 removed lines: 3033 total lines: 6967 note2 $ ohcount msgpack_rpc/ api/ os/ event/ tui/ shada.c rbuffer.c terminal.c memory.c c 79 14576 2863 16.4% 2154 19593","title":"Newsletter #7 - Summer of Road"},{"location":"news/2016-11-01-newsletter/#what-is-neovim","text":"Each minute, a new text editor is born (source: Hacker News). There are endless text editors that address the \"common case\". Instead of another Vim-like text editor, Neovim users want a better Vim. Thousands of small decisions live in the Vim core, accumulated over decades; most of those decisions are still relevant, solving subtle problems that new projects have yet to encounter, digest and decide. Neovim is a refactor of Vim to make it viable for another 30 years of hacking. See :help vim-differences for a reference of changes and improvements.","title":"What is Neovim?"},{"location":"news/2016-11-01-newsletter/#should-i-switch","text":"Neovim very intentionally builds on the long history of Vim community knowledge and user habits. That means \"switching\" from Vim to Neovim is just an \"upgrade\" \u2014like installing a new version of Vim. If you log onto a server or workstation with only Vim, you won't be lost. If you find an article about Vim, it likely also applies to Neovim, unless it's about :smile . So if you like Vim, try Neovim. If you love Vim, try this ;)","title":"Should I switch?"},{"location":"news/2016-11-01-newsletter/#hacking-or-plain-old-engineering","text":"From the start, one of Neovim's explicit goals has been: Simplify maintenance and encourage contributions We want a hackable Vim : a codebase and community that enables experimentation and low-cost trials of new features. And there's evidence of real progress towards that ambition. We've successfully executed non-trivial \"off-the-roadmap\" patches: features which are important to their authors, but not the highest priority for the project. :tchdir enables tab-local \"working directory\" 'statusline' supports unlimited alignment sections ( PR #4489 ) TextYankPost event makes it trivial to implement a reliable yank ring , send yanks to an external service, and applications we didn't anticipate QuickFixLine is a new highlight group man.vim offers completion, improved highlighting, and more These patches were included because they: fit into existing conventions/design included robust test coverage (enabled by an advanced test framework and CI) received thoughtful review by other contributors They are casually mentioned in :help nvim-features :)","title":"Hacking... or plain old Engineering"},{"location":"news/2016-11-01-newsletter/#fun-without-smile","text":"New clients and innovative applications are appearing more frequently than ever. NyaoVim is a thoughtfully-designed, modular Electron GUI . Its <neovim-editor> web component can be used in your own project , including VS Code, Atom, and other Electron or nw.js projects! ONI is an Electron-based Neovim IDE showing many exciting possiblities. It also has a cool logo like NyaoVim :) Users love deoplete , the first non-blocking auto-completion plugin for vim. @qvacua turned his sights to nvim , progressing rapidly on a new nvim -based backend for his well-known VimR project, a polished GUI for macOS . There are pre-built .app bundles for macOS 10.11 at the releases page. The cross-platform neovim-qt GUI continues to get better: it's as fast as gVim, with less flicker, and it doesn't depend GTK/KDE. neovim.app is a macOS Neovim GUI available via homebrew for macOS 10.9+. nvim-hs is a host to enable writing Neovim plugins in Haskell . Check out cl-neovim for authoring Neovim lisp plugins . Includes :Lispdo ! nvr now supports the Vim \"clientserver\" options --servername , --remote , etc. nvr is perfect for communicating with a parent nvim instance from a :terminal buffer. Intero users are joyful about intero.nvim and intero-neovim There are clients for go, julia, perl, Java, R, Elixir, Clojure, and more. Visit the related projects wiki page to discover new projects as they emerge!","title":"Fun without :smile?"},{"location":"news/2016-11-01-newsletter/#project-management","text":"Clarity and consistency breed contribution. \u2014 @robertmeta","title":"Project management"},{"location":"news/2016-11-01-newsletter/#benevolent-dictator-for-a-limited-time","text":"In July, Thiago (@tarruda) took a less active role in the project, for personal reasons. He hopes to resume active contributions in the future. Some have asked for a \"BDFL\" to be named. @justinmk has that role, unless you want it: we've made steps to document the role of maintainer, so that anyone trusted by most contributors can step up in the future. The ultimate goal is to spread out tasks as horizontally as possible, and to continue to give the \"commit bit\" to people we've grown to trust. There are currently 14 core contributors; we'd like to scale that to 50. We don't want the project to depend on heroic effort, but a flow of interested parties working within the conventions and etiquette of the Vim community.","title":"Benevolent Dictator For a Limited time"},{"location":"news/2016-11-01-newsletter/#funding","text":"The (ongoing) successful funding campaign yielded libmpack , :terminal , and major refactors and improvements (e.g. decoupling the UI logic from the TUI). With Thiago taking a less active role in the project, the funding is available to other developers. @ZyX-I , a prolific committer to Neovim (21 kLOC contributed) and Vim ( 13 kLOC , including if_python ), agreed to take the role of \"lead developer\", i.e. the developer who receives the funding. His work on Neovim includes: first-class XDG support, shada, build-time generators, automated change-aware linter, Lua-to-VimL translator critical internals such as msgpackparse() and os/fileio.c (buffered I/O) complete rewrite of Vim JSON support, including granular error messages comprehensive test coverage for all of the above The funding does not always go to one person. It's available to any core contributor who wants to take a month or more to focus on Neovim.","title":"Funding"},{"location":"news/2016-11-01-newsletter/#donations","text":"Because funding is monthly, it is (hopefully) a low-friction decision: To donate $10, you could pledge $1 per month. If the project makes you rage, just cancel your pledge. If the project makes you happy (despite the lack of :smile , somehow), let the pledge continue!","title":"Donations"},{"location":"news/2016-11-01-newsletter/#api","text":"The Neovim API is one of the defining technical and \"soft\" features of the project. In PR #5535 we formed a strategy for growing the API without breaking clients . We established the API Level concept, to enable trivial comparison and emphasize that the API version is separate from the Neovim version. We added version and deprecation fields to the API metadata. We'll never break API function signatures published in a tagged release. We won't remove deprecated API functions until Neovim version 2.0 (if ever). The API should only grow , not break. Each API function is marked by the API level where it first became available. This makes it practical for the numerous Neovim API clients to support any released version of Neovim. Since PR #4934 you can call the API of the current nvim process directly from VimL : :echo nvim_buf_get_lines(42, 1, 3, v:false) Try :call nvim_<Tab> at the command line to see the available API functions, or install the nvim-api-viewer plugin to see a nice overview of available API functions. We take API reliability seriously, and we've tried to think carefully about the design. Feedback from plugin and client authors is appreciated!","title":"API"},{"location":"news/2016-11-01-newsletter/#release-strategy","text":"","title":"Release strategy"},{"location":"news/2016-11-01-newsletter/#versioning","text":"One year ago we announced our first release, 0.1 . We've streamlined the release process (versioning, tagging, changelogs, announcements). Some users wonder if 0.1 means Neovim is unstable. Each release since 0.1 is considered stable for use on all systems except Windows. Windows will be a first-class target starting with 0.2 . Until 1.0 , some non-API features may break backwards compatibility. This is uncommon, and these cases are always documented . In 0.1.6 we introduced API versioning . Clients can dynamically decide which functions to use. We follow semver ; the recommendations there explain the intention of the 0.x series.","title":"Versioning"},{"location":"news/2016-11-01-newsletter/#os-packages","text":"More OS packages are appearing. Neovim is part of Debian's next release ! Special thanks to @jamessan (Debian maintainer and Neovim contributor), @fwalch and others who build packages for their favorite systems and work with us to address inevitable compiler/platform quirks.","title":"OS Packages"},{"location":"news/2016-11-01-newsletter/#progress","text":"What did Neovim contributors accomplish since 2014? By a conservative estimate at least 20,000 new lines of C code have been written. We've written 2200 new tests, in addition to passing Vim's own test suite. 273 different people have contributed to the core project. The core project has more commits in 3 years than Vim in 12 years. Besides major refactoring and feature work, a ton of time was put into the Neovim continuous integration (CI) system. In a stable but fragile C codebase, maintainers tend to ignore \"small\" features because they may be too risky. CI reduces fragility so we can welcome feature work large and small , instead of fearing change. New features can be tested rigorously with screen tests . For example, here's a test that exercises the 'wildmode' UI behavior: describe(\"'wildmenu'\", function() it(':sign <tab> shows wildmenu completions', function() execute('set wildmode=full') execute('set wildmenu') feed(':sign <tab>') screen:expect([[ | ~ | ~ | define jump list > | :sign define^ | ]]) end) end) After we forked Vim in 2014, there was an unstable period; that gap has become smaller and smaller, and will vanish in 2017. Each regression fix is covered by integration tests. Each pull request builds against 12 different environments. Special thanks to @jszakmeister, @fwalch and @ZyX-I for their work on the build system, and to @oni-link for fixing some very difficult bugs.","title":"Progress"},{"location":"news/2016-11-01-newsletter/#little-things-matter","text":"One of the strongest impressions from social media is that people really appreciate less friction when they try Neovim. Defaults matter. Tim Pope deserves credit for curating many of the defaults we chose. @fmoralesc and others thought carefully about how to implement these defaults without causing regressions ( encoding=utf8 and syntax/filetype were tricky). The work was tedious, but justified: it's a one-time cost that helps new users, old users on new systems (which are everywhere these days: VMs, containers, servers...), and all users by propagating Vim \"best practices\".","title":"Little things matter"},{"location":"news/2016-11-01-newsletter/#features","text":"Here are some new developments since the last newsletter. Ruby support landed in 0.1.5. This means you can write Neovim plugins in ruby and the legacy Vim :ruby* commands are supported (so existing Vim+ruby plugins work in Neovim, such as Command-t and vim-github-dashboard). To enable Ruby support, just gem install neovim . You don't need to worry about compiling against a specific version. Write plugins in Go with the Neovim API Go client ! (Thanks to @garyburd!) :CheckHealth detects common problems (like Homebrew's doctor ). Run it whenever you install or upgrade Neovim. buffer-local highlighting ( :help api-highlights ) is similar to matchaddpos() , with some key differences: it is associated with a buffer and adapts to line insertions and deletions . Useful for linter or semantic highlighter plugins that monitor a buffer for changes and compute highlights in the background.","title":"Features"},{"location":"news/2016-11-01-newsletter/#externalized-ui-widgets","text":"In PR #4432 @bfredl made the first step to give UIs more control over the display of \"widgets\". @romgrk quickly made a proof of concept . It didn't take long for an ambitious patch to externalize cmdline, tab, wildmenu, and preview window widgets . The demo shows exciting potential: This work was possible because @tarruda cleanly separated the terminal-UI (TUI) from the internal screen, so even the built-in TUI is driven by UI events like any other externalized UI.","title":"Externalized UI Widgets"},{"location":"news/2016-11-01-newsletter/#incremental-live-substitute","text":"In May 2016 a group of students mentored by Eric Burel contacted us about contributing to Neovim. From a list of ideas we provided, they decided to implement a \"live preview\" for :substitute . We merged it in PR #5561 , released in 0.1.7 . Set the inccommand option to try it: :set inccommand=split This feature was made possible by our development model: despite having \"no time\" for a side-project, we outlined the basic idea, the students made decisions out-of-band, and we provided clarification as needed. The students posted a PR to allow ongoing feedback. The PR fork was updated regularly, so reviewers could pull, build, and test. Tests were written using screen tests , helping coverity/ASan/etc to exercise the feature and reviewers to visualize the behavior . The automated build system continuously ran the changes against 12 different systems. Eric wrote about the experience . Thanks to Eric, the students at ENSIMAG, @KillTheMule , and @bfredl for carrying this feature to a conclusion we are proud of.","title":"Incremental (\"live\") :substitute"},{"location":"news/2016-11-01-newsletter/#upcoming","text":"Look for the following developments in 2017 for Neovim 0.3 . We will ship Lua as a default scripting alternative in 2017. The next \"inflection point\" of reduced-risk, rapid enhancement is to make the core extensible with Lua. For that PR #4411 is an important step. With ZyX's eval.c refactor the monolithic eval.c will be separated into modules , marking a point where Neovim's VimL implementation diverges from Vim's. This will be the world's second alternative VimL implementation (ZyX's VimL-to-Lua PR was the first). Extended marks will give plugin authors more powerful and flexible marks. We will take a close look at the Microsoft Language Server Implementation to decide how it and similar middleware can integrate elegantly with Neovim.","title":"Upcoming"},{"location":"news/2016-11-01-newsletter/#eof","text":"So that was 2016 for Neovim. Could 2017 be the Year of the Neovim Desktop? Neovim's ideas are finding their way into other projects, such as Xi editor and Vim itself, which has seen more activity this year than any other year in its history . There's a beehive of activity in the gitter and IRC channels (which are bridged by matrix thanks to @leonerd!). Visit us to talk about the project. And don't forget there's a roadmap at neovim.io if you want to check where the project is headed. Thanks for reading. \u2014Justin M. Keyes (@justinmk)","title":"EOF"},{"location":"news/2016-11-01-newsletter/#note1","text":"$ git log --grep='\\([zZ]y[xX]\\)\\|\\([nN]ikolai [pP]av\\)\\|\\([nN]ikolay [pP]av\\)' --numstat --pretty=tformat: --numstat|gawk '{ add += $1; subs += $2; loc += $1 - $2 } END { printf \"added lines: %s removed lines: %s total lines: %s\\n\", add, subs, loc }' added lines: 22590 removed lines: 8620 total lines: 13970 $ git log --grep='[cC]hristian [bB]rab' --numstat --pretty=tformat: --numstat|gawk '{ add += $1; subs += $2; loc += $1 - $2 } END { printf \"added lines: %s removed lines: %s total lines: %s\\n\", add, subs, loc }' added lines: 10000 removed lines: 3033 total lines: 6967","title":"note1"},{"location":"news/2016-11-01-newsletter/#note2","text":"$ ohcount msgpack_rpc/ api/ os/ event/ tui/ shada.c rbuffer.c terminal.c memory.c c 79 14576 2863 16.4% 2154 19593","title":"note2"},{"location":"news/2017-12-16-newsletter/","text":"What is Neovim? Neovim is a fork of the venerable text-editor vim, focused on extensibility and usability. It is not a rewrite but a continuation and extension of Vim. Many clones and derivatives exist, some very clever\u2014but none are Vim. Neovim is built for users who want the good parts of Vim, and more. See a list of differences at :help vim-differences . Participating If you are interested in contributing to Neovim, read CONTRIBUTING.md to get started. We have a great test suite and automated CI, so you can just jump in and have a go. Don't be afraid to open a PR to get comments or just take advantage of the infrastructure! To get in touch with the team, join the gitter channel (also accessible via IRC ), or visit the Neovim subreddit , which many of the developers read. Taking part in conversations is a contribution, too! New contributor shoutout: @ckelsel has been responsible for porting a large number of vim patches , as has @lonerover . Thank you! Old contributor shoutout: @oni-link isn't a name you read a lot in the commit logs, but he's been very helpful in reviewing changes and improving complicated PR's for quite some time. Thank you! What's new The last newsletter has gathered some dust, so we want to bring you up-to-date in the Neovim world. Neovim has had 3(!) releases since back then, so let us recap those first and foremost: Release 0.2 This release brings a host of fixes and improvements. We'll look at some of them closer below, but be sure to also check out the release page for all the gory details. 0.2 for Users Microsoft Windows is now fully supported :terminal mode is available in 0.2.1, see below! Starting this release, Neovim offers pre-built packages for macOS and Windows (32-bit and 64-bit). The Windows package contains a GUI and some additional tools like curl.exe . :terminal has seen various improvements ( @justinmk , #6185 ) findfile() , :find and gf now work in :terminal buffers ( @tweekmonster , #6009 ) Shell output is now throttled to maintain terminal responsiveness ( @justinmk , #5396 ) Arguments for shell commands now work properly with :term ( @friedsock , #4504 ) Numerous improvements to man.vim have been made ( @m-wynn , @raichoo , @renstrom , @justinmk , #6693 , #6766 , #6815 , #3104 , #7405 ) Man and help pages now contain a TOC ( @tweekmonster , #5169 ) The message Reading from stdin was removed ( @msva , #6298 ) guicursor now works in the TUI ( @teto , #6423 ) There's a new highlight group Whitespace for whitespace-related listchars ( @zhou13 , #6367 ) Commandline completion has been implemented ( @justinmk , #6376 ) The event DirChanged is now available for autocommands ( @mhinz , #5928 ) cpoptions : Use the _ flag to toggle cw behaviour ( @raichoo , @chrisbra , #6235 ) CTRL-R now omits trailing ^M when pasting to the commandline ( @justinmk , #6137 ) You can now :edit filenames without escaping whitespaces ( @Kurt-Bonatz , #6119 ) Changes to defaults: mouse=a is no longer the default ( @justinmk , #6022 ) NVIM_TUI_ENABLE_CURSOR_SHAPE was removed, you can use guicursor instead (see https://github.com/neovim/neovim/releases/tag/v0.2.0 ) showcmd , belloff=all , ruler are now default ( @justinmk , #6087 ) 0.2 for Developers Full API documentation at :help api API changes: {get,set}_option now update local options as appropriate ( @yagebu , #6405 ) nvim_get_mode is available ( @justinmk , #6247 ) External UIs can now draw the tabline ( @dzhou121 , #6583 ) writefile now obeys the fsync option ( @ZyX-I , #6427 ) In addition to the effort from the vim guys (7.4.{2055,2057,2058}), eval.c has been refactored and error messages were improved ( @ZyX-I , #5119 ) The id function is now available, and printf(%p) is finally useful ( @ZyX-I , #6095 ) All providers will be disabled if g:loaded_* exists ( @justinmk , commit ) setpos can now set lowercase marks in other buffers ( @hardenedapple , #5753 ) You can check v:exiting to see if Neovim is exiting ( @mhinz , #5651 ) Release 0.2.1 Next let's see what happened in 0.2.1. As before, check out the release notes for details. 0.2.1 for Users Nvim now supports window-local highlighting ( @bfredl , #6700 ) Even more terminal improvements: TUI cursor motion, SGR, and scrolling optimizations, cursor shape and terminal type recognition improvements have been merged ( @jdebp , #6816 ) Terminal buffers are adjusted when using the number column ( @tecywiz121 , #7440 ) A newly created :terminal will now stay in normal mode ( @nelstrom , #6808 ) The command line can now be colored ( @ZyX-l , #6364 ) Custom clipboard providers can now be configured ( @nhooyr , #6030 ) The clipboard provider can now fall back to tmux support ( @xu-cheng , #6894 ) Further improvements for :Tutor have been made ( @fmoralesc , #7028 ) inccommand now works with leading modifiers like keeppattern ( @jamessan , #6967 ) The ruby host can be configured ( @alexgenco , #6841 ) The unnamed register is kept on restart ( @AdnoC , #4700 ) For Windows users: Neovim can be used on the console ( @equalsraf , #6315 ) :terminal has been implemented ( @erw7 , #7007 ) Path handling on windows has been improved ( @aignas , #7349 ) For Linux users: You can now download AppImage packages ( @AdnoC , #6638 ) Function keys now work in the terminal UI ( @rjmill , #5014 ) Fixed a crash with extremely long lines (more than 100m virtual columns) ( @Grimy , #3527 ) :cquit now takes an optional error code as argument ( @joshleeb , #7336 ) True colors in tmux have been fixed ( @DarkDefender , #7100 ) :checkhealth is a builtin now, and validates your $VIMRUNTIME ( @justinmk , #7399 ) cursorcolumn and colorcolumn respect syntax highlighting ( @zhou13 , @justinmk , #7364 ) 0.2.1 for Developers Changes: External UIs now should use the FocusGained event instead of sending the <FocusGained> pseudokey ( @justinmk , #7221 ) Neovim sources are now analyzed with PVS ( @ZyX-l , #6493 ) External UIs can now draw ... the tabline ( @dzhou121 , #6583 ) ... the command line ( @dzhou121 , @bfredl , #6162 ) ... the wildmenu ( @dzhou121 , @bfredl , #7454 ) Lua is gaining momentum: The interface has been implemented ( @ZyX-I , #4411 ) Lua files can now be required from lua/ ( @ZyX-l , #6789 ) Call lua directly from the API ( @bfredl , #6704 ) Programmatically get information about mappings via get_keymap ( @tjdevries , #6236 ) You can now retrieve highlights using nvim_get_hl_by_name/by_id ( @teto , #7082 ) bufhl can now be used to create new highlighting groups ( @bfredl , #7414 ) External UIs can get menus from menu_get ( @teto , #6322 ) menu_get pretty-prints special chars, making it possible to feed its results back into e.g. nvim_input ( @teto , @KillTheMule , #7340 ) RPC clients can connect to a socket using sockconnect ( @bfredl , #6594 ) serverstart now uses uv_getaddrinfo() , bringing IPv6 support ( @mhinz , #6680 ) You can now define several functions in one :execute call ( @ZyX-I , #6914 ) Logging has been enabled per default ( @justinmk , #6827 ) Release 0.2.2 This is a fast-and-furious containing mostly bug-fixes. See the release-notes for details. Some new features are in, too: curdir has been added as a viewoption ( @EricR86 , #7447 ) A node host is available ( @billyvg , #7458 ) :checkhealth now also validates the runtimepath ( @justinmk , #7526 ) scrollback now defaults to 10000 ( @justinmk , #7556 ) A bugfix of note is the reversal of the netrw update, we've been seeing quite some reports about that! ( @justinmk , #7557 ) 0.2.3-dev Want to know what to expect from the next release? Here's a list to whet your appetite: CmdlineEnter and CmdlineLeave autocommands ( @bfredl , #7422 ) Channels: support buffered output and bytes sockets/stdio ( @bfredl , #6844 ) A proper viml expression parser ( @ZyX-l , #7234 ) A lot of work has been put into making Neovim work better with different terminal emulators, and is still ongoing ( @justinmk , #7664 , #7653 , #7720 , #7640 , #7624 and @florolf , #7676 ) The near future: Upcoming For an overview of planned features, goals and ideas for Neovim head to the road map . Some noteworthy upcoming PRs are: Floating Windows for external UIs ( @bfredl , #6619 ) Extended Marks ( @timeyyy , #5031 ) Buffer change notifications ( @phodge , #5269 ) Built in LSP support ( @tjdevries , #6856 ) (see http://langserver.org/ why that could be of interest to you) PSA : If you build Neovim from the latest master, always check Following HEAD for any changes. Around Neovim The wiki page of related projects has seen quite some additions, check out the full changes here . API clients API clients are at the heart of Neovim's architecture, and significantly improve developer experience. Write a plugin in any language you want! Since the last newsletter, we've seen the addition of another C++ client, one for Elixir , and a Racket client. The node client got an overhaul and a new maintainer. Thanks @billyvg for taking over! While not totally new, a special shoutout goes to the ruby client for being very well-maintained. Thanks, @alexgenco ! If you happen to prefer a language not yet listed, a good starting point are the docs , and be sure to come talk about it on the gitter channel . GUIs Too much activity has happened on the GUI front to list all new clients, so let's just have a look at some that stand out. VSCode is using Neovim to properly integrate ex-mode commands , and Sublime Text 3 gained full Neovim integration . The latter also makes use of another cool Neovim-specific feature, the externalized popupmenu, and it only took them 50 LOC . Last but not least, eovim is an enlightenment client for Neovim. The Architecture of Neovim. Some students have studied the Architecture of Neovim and published an \"analytical essay\" about their findings. Be sure to have a look if you are interested in the bigger picture. Vimcasts and Modern Vim Drew Neil of vimcasts fame has started recording casts about Neovim , and began work on a successor to his praised book Practical Vim called Modern Vim . Most of the book will be suitable for Vim 8 and Neovim users, but about 1/3rd of the book will cover Neovim-specific functionality. Libuv One of the founding stones of Neovim has been porting I/O to libuv. So you will be happy to hear that libuv has set out to support more platforms . Neovim, soon coming to a platform near you! Test suite Neovim offers easy testing via the wonderfully simple Lua language. Why aren't others doing it, you ask? Turns out, they do , or at least, the neomutt project is preparing for it. Very nice to see ideas from Neovim taken up . Stats Changes lines since the last newsletter: git log --since=\"2016-11-01\" --numstat --pretty=tformat: --numstat|gawk '{ add += $1; subs += $2; loc += $1 - $2 } END { printf \"added lines: %s removed lines: %s total lines: %s\\n\", add, subs, loc }' added lines: 255393 removed lines: 221106 total lines: 34287 Merged commits: git log --since=\"2016-11-01\"|wc -l 3110 Different commit authors: git shortlog -e -s -n --since=\"2016-11-01\"|wc -l 146 Documentation changes: git log --since=\"2016-11-01\" --numstat --pretty=tformat: --numstat runtime/doc|gawk '{ add += $1; subs += $2; loc += $1 - $2 } END { printf \"added lines: %s removed lines: %s total lines: %s\\n\", add, subs, loc }' added lines: 8579 removed lines: 6577 total lines: 2002 Thanks Thank you contributors, sponsors, bug-reporters, supporters. Thank you @justinmk for the awesome project and thank you @brammool for your foundational work. @brammool and @chrisbra from the vim team have left a few comments on our issue tracker, it's nice to be working together!","title":"Newsletter #8 - Open up the Windows"},{"location":"news/2017-12-16-newsletter/#what-is-neovim","text":"Neovim is a fork of the venerable text-editor vim, focused on extensibility and usability. It is not a rewrite but a continuation and extension of Vim. Many clones and derivatives exist, some very clever\u2014but none are Vim. Neovim is built for users who want the good parts of Vim, and more. See a list of differences at :help vim-differences .","title":"What is Neovim?"},{"location":"news/2017-12-16-newsletter/#participating","text":"If you are interested in contributing to Neovim, read CONTRIBUTING.md to get started. We have a great test suite and automated CI, so you can just jump in and have a go. Don't be afraid to open a PR to get comments or just take advantage of the infrastructure! To get in touch with the team, join the gitter channel (also accessible via IRC ), or visit the Neovim subreddit , which many of the developers read. Taking part in conversations is a contribution, too! New contributor shoutout: @ckelsel has been responsible for porting a large number of vim patches , as has @lonerover . Thank you! Old contributor shoutout: @oni-link isn't a name you read a lot in the commit logs, but he's been very helpful in reviewing changes and improving complicated PR's for quite some time. Thank you!","title":"Participating"},{"location":"news/2017-12-16-newsletter/#whats-new","text":"The last newsletter has gathered some dust, so we want to bring you up-to-date in the Neovim world. Neovim has had 3(!) releases since back then, so let us recap those first and foremost:","title":"What's new"},{"location":"news/2017-12-16-newsletter/#release-02","text":"This release brings a host of fixes and improvements. We'll look at some of them closer below, but be sure to also check out the release page for all the gory details.","title":"Release 0.2"},{"location":"news/2017-12-16-newsletter/#02-for-users","text":"Microsoft Windows is now fully supported :terminal mode is available in 0.2.1, see below! Starting this release, Neovim offers pre-built packages for macOS and Windows (32-bit and 64-bit). The Windows package contains a GUI and some additional tools like curl.exe . :terminal has seen various improvements ( @justinmk , #6185 ) findfile() , :find and gf now work in :terminal buffers ( @tweekmonster , #6009 ) Shell output is now throttled to maintain terminal responsiveness ( @justinmk , #5396 ) Arguments for shell commands now work properly with :term ( @friedsock , #4504 ) Numerous improvements to man.vim have been made ( @m-wynn , @raichoo , @renstrom , @justinmk , #6693 , #6766 , #6815 , #3104 , #7405 ) Man and help pages now contain a TOC ( @tweekmonster , #5169 ) The message Reading from stdin was removed ( @msva , #6298 ) guicursor now works in the TUI ( @teto , #6423 ) There's a new highlight group Whitespace for whitespace-related listchars ( @zhou13 , #6367 ) Commandline completion has been implemented ( @justinmk , #6376 ) The event DirChanged is now available for autocommands ( @mhinz , #5928 ) cpoptions : Use the _ flag to toggle cw behaviour ( @raichoo , @chrisbra , #6235 ) CTRL-R now omits trailing ^M when pasting to the commandline ( @justinmk , #6137 ) You can now :edit filenames without escaping whitespaces ( @Kurt-Bonatz , #6119 ) Changes to defaults: mouse=a is no longer the default ( @justinmk , #6022 ) NVIM_TUI_ENABLE_CURSOR_SHAPE was removed, you can use guicursor instead (see https://github.com/neovim/neovim/releases/tag/v0.2.0 ) showcmd , belloff=all , ruler are now default ( @justinmk , #6087 )","title":"0.2 for Users"},{"location":"news/2017-12-16-newsletter/#02-for-developers","text":"Full API documentation at :help api API changes: {get,set}_option now update local options as appropriate ( @yagebu , #6405 ) nvim_get_mode is available ( @justinmk , #6247 ) External UIs can now draw the tabline ( @dzhou121 , #6583 ) writefile now obeys the fsync option ( @ZyX-I , #6427 ) In addition to the effort from the vim guys (7.4.{2055,2057,2058}), eval.c has been refactored and error messages were improved ( @ZyX-I , #5119 ) The id function is now available, and printf(%p) is finally useful ( @ZyX-I , #6095 ) All providers will be disabled if g:loaded_* exists ( @justinmk , commit ) setpos can now set lowercase marks in other buffers ( @hardenedapple , #5753 ) You can check v:exiting to see if Neovim is exiting ( @mhinz , #5651 )","title":"0.2 for Developers"},{"location":"news/2017-12-16-newsletter/#release-021","text":"Next let's see what happened in 0.2.1. As before, check out the release notes for details.","title":"Release 0.2.1"},{"location":"news/2017-12-16-newsletter/#021-for-users","text":"Nvim now supports window-local highlighting ( @bfredl , #6700 ) Even more terminal improvements: TUI cursor motion, SGR, and scrolling optimizations, cursor shape and terminal type recognition improvements have been merged ( @jdebp , #6816 ) Terminal buffers are adjusted when using the number column ( @tecywiz121 , #7440 ) A newly created :terminal will now stay in normal mode ( @nelstrom , #6808 ) The command line can now be colored ( @ZyX-l , #6364 ) Custom clipboard providers can now be configured ( @nhooyr , #6030 ) The clipboard provider can now fall back to tmux support ( @xu-cheng , #6894 ) Further improvements for :Tutor have been made ( @fmoralesc , #7028 ) inccommand now works with leading modifiers like keeppattern ( @jamessan , #6967 ) The ruby host can be configured ( @alexgenco , #6841 ) The unnamed register is kept on restart ( @AdnoC , #4700 ) For Windows users: Neovim can be used on the console ( @equalsraf , #6315 ) :terminal has been implemented ( @erw7 , #7007 ) Path handling on windows has been improved ( @aignas , #7349 ) For Linux users: You can now download AppImage packages ( @AdnoC , #6638 ) Function keys now work in the terminal UI ( @rjmill , #5014 ) Fixed a crash with extremely long lines (more than 100m virtual columns) ( @Grimy , #3527 ) :cquit now takes an optional error code as argument ( @joshleeb , #7336 ) True colors in tmux have been fixed ( @DarkDefender , #7100 ) :checkhealth is a builtin now, and validates your $VIMRUNTIME ( @justinmk , #7399 ) cursorcolumn and colorcolumn respect syntax highlighting ( @zhou13 , @justinmk , #7364 )","title":"0.2.1 for Users"},{"location":"news/2017-12-16-newsletter/#021-for-developers","text":"Changes: External UIs now should use the FocusGained event instead of sending the <FocusGained> pseudokey ( @justinmk , #7221 ) Neovim sources are now analyzed with PVS ( @ZyX-l , #6493 ) External UIs can now draw ... the tabline ( @dzhou121 , #6583 ) ... the command line ( @dzhou121 , @bfredl , #6162 ) ... the wildmenu ( @dzhou121 , @bfredl , #7454 ) Lua is gaining momentum: The interface has been implemented ( @ZyX-I , #4411 ) Lua files can now be required from lua/ ( @ZyX-l , #6789 ) Call lua directly from the API ( @bfredl , #6704 ) Programmatically get information about mappings via get_keymap ( @tjdevries , #6236 ) You can now retrieve highlights using nvim_get_hl_by_name/by_id ( @teto , #7082 ) bufhl can now be used to create new highlighting groups ( @bfredl , #7414 ) External UIs can get menus from menu_get ( @teto , #6322 ) menu_get pretty-prints special chars, making it possible to feed its results back into e.g. nvim_input ( @teto , @KillTheMule , #7340 ) RPC clients can connect to a socket using sockconnect ( @bfredl , #6594 ) serverstart now uses uv_getaddrinfo() , bringing IPv6 support ( @mhinz , #6680 ) You can now define several functions in one :execute call ( @ZyX-I , #6914 ) Logging has been enabled per default ( @justinmk , #6827 )","title":"0.2.1 for Developers"},{"location":"news/2017-12-16-newsletter/#release-022","text":"This is a fast-and-furious containing mostly bug-fixes. See the release-notes for details. Some new features are in, too: curdir has been added as a viewoption ( @EricR86 , #7447 ) A node host is available ( @billyvg , #7458 ) :checkhealth now also validates the runtimepath ( @justinmk , #7526 ) scrollback now defaults to 10000 ( @justinmk , #7556 ) A bugfix of note is the reversal of the netrw update, we've been seeing quite some reports about that! ( @justinmk , #7557 )","title":"Release 0.2.2"},{"location":"news/2017-12-16-newsletter/#023-dev","text":"Want to know what to expect from the next release? Here's a list to whet your appetite: CmdlineEnter and CmdlineLeave autocommands ( @bfredl , #7422 ) Channels: support buffered output and bytes sockets/stdio ( @bfredl , #6844 ) A proper viml expression parser ( @ZyX-l , #7234 ) A lot of work has been put into making Neovim work better with different terminal emulators, and is still ongoing ( @justinmk , #7664 , #7653 , #7720 , #7640 , #7624 and @florolf , #7676 )","title":"0.2.3-dev"},{"location":"news/2017-12-16-newsletter/#the-near-future-upcoming","text":"For an overview of planned features, goals and ideas for Neovim head to the road map . Some noteworthy upcoming PRs are: Floating Windows for external UIs ( @bfredl , #6619 ) Extended Marks ( @timeyyy , #5031 ) Buffer change notifications ( @phodge , #5269 ) Built in LSP support ( @tjdevries , #6856 ) (see http://langserver.org/ why that could be of interest to you) PSA : If you build Neovim from the latest master, always check Following HEAD for any changes.","title":"The near future: Upcoming"},{"location":"news/2017-12-16-newsletter/#around-neovim","text":"The wiki page of related projects has seen quite some additions, check out the full changes here .","title":"Around Neovim"},{"location":"news/2017-12-16-newsletter/#api-clients","text":"API clients are at the heart of Neovim's architecture, and significantly improve developer experience. Write a plugin in any language you want! Since the last newsletter, we've seen the addition of another C++ client, one for Elixir , and a Racket client. The node client got an overhaul and a new maintainer. Thanks @billyvg for taking over! While not totally new, a special shoutout goes to the ruby client for being very well-maintained. Thanks, @alexgenco ! If you happen to prefer a language not yet listed, a good starting point are the docs , and be sure to come talk about it on the gitter channel .","title":"API clients"},{"location":"news/2017-12-16-newsletter/#guis","text":"Too much activity has happened on the GUI front to list all new clients, so let's just have a look at some that stand out. VSCode is using Neovim to properly integrate ex-mode commands , and Sublime Text 3 gained full Neovim integration . The latter also makes use of another cool Neovim-specific feature, the externalized popupmenu, and it only took them 50 LOC . Last but not least, eovim is an enlightenment client for Neovim.","title":"GUIs"},{"location":"news/2017-12-16-newsletter/#the-architecture-of-neovim","text":"Some students have studied the Architecture of Neovim and published an \"analytical essay\" about their findings. Be sure to have a look if you are interested in the bigger picture.","title":"The Architecture of Neovim."},{"location":"news/2017-12-16-newsletter/#vimcasts-and-modern-vim","text":"Drew Neil of vimcasts fame has started recording casts about Neovim , and began work on a successor to his praised book Practical Vim called Modern Vim . Most of the book will be suitable for Vim 8 and Neovim users, but about 1/3rd of the book will cover Neovim-specific functionality.","title":"Vimcasts and Modern Vim"},{"location":"news/2017-12-16-newsletter/#libuv","text":"One of the founding stones of Neovim has been porting I/O to libuv. So you will be happy to hear that libuv has set out to support more platforms . Neovim, soon coming to a platform near you!","title":"Libuv"},{"location":"news/2017-12-16-newsletter/#test-suite","text":"Neovim offers easy testing via the wonderfully simple Lua language. Why aren't others doing it, you ask? Turns out, they do , or at least, the neomutt project is preparing for it. Very nice to see ideas from Neovim taken up .","title":"Test suite"},{"location":"news/2017-12-16-newsletter/#stats","text":"Changes lines since the last newsletter: git log --since=\"2016-11-01\" --numstat --pretty=tformat: --numstat|gawk '{ add += $1; subs += $2; loc += $1 - $2 } END { printf \"added lines: %s removed lines: %s total lines: %s\\n\", add, subs, loc }' added lines: 255393 removed lines: 221106 total lines: 34287 Merged commits: git log --since=\"2016-11-01\"|wc -l 3110 Different commit authors: git shortlog -e -s -n --since=\"2016-11-01\"|wc -l 146 Documentation changes: git log --since=\"2016-11-01\" --numstat --pretty=tformat: --numstat runtime/doc|gawk '{ add += $1; subs += $2; loc += $1 - $2 } END { printf \"added lines: %s removed lines: %s total lines: %s\\n\", add, subs, loc }' added lines: 8579 removed lines: 6577 total lines: 2002","title":"Stats"},{"location":"news/2017-12-16-newsletter/#thanks","text":"Thank you contributors, sponsors, bug-reporters, supporters. Thank you @justinmk for the awesome project and thank you @brammool for your foundational work. @brammool and @chrisbra from the vim team have left a few comments on our issue tracker, it's nice to be working together!","title":"Thanks"},{"location":"news/2019-03-17-newsletter/","text":"Neovim was again accepted into the Google Summer of Code program. View our page on the GSoC website for details. Our ideas list runneth over! You're also welcome to propose other ideas in chat or on the ticket tracker . Results from last year In our first GSoC ever, we mentored two students who both completed their projects. Brock Mammen implemented a C# client for Nvim , and even went further with a Nvim extension for Visual Studio! He also made significant improvements to the build system, particularly for Windows/MSVC. The multigrid project by Utkarsh Maheshwari involved low-level changes to the UI subsystem: breaks up the screen grid in per-window grids, allows UIs to set different sizes for each window grid and receive grid based events. The final product was integrated by mentor Bj\u00f6rn Linse into the Nvim master branch, providing the foundation for the floating windows feature. This demo shows the feature being used in a popular plugin to reveal documentation with completion results: Looking forward Our mentors are looking forward to your GSoC proposals in the next weeks! The best way to get familiar with Neovim development is to send a pull request to help out with a small bug or feature request. Working with students on pull requests is extremely helpful for determining mentor-student workflow.","title":"Google Summer of Code 2019"},{"location":"news/2019-03-17-newsletter/#results-from-last-year","text":"In our first GSoC ever, we mentored two students who both completed their projects. Brock Mammen implemented a C# client for Nvim , and even went further with a Nvim extension for Visual Studio! He also made significant improvements to the build system, particularly for Windows/MSVC. The multigrid project by Utkarsh Maheshwari involved low-level changes to the UI subsystem: breaks up the screen grid in per-window grids, allows UIs to set different sizes for each window grid and receive grid based events. The final product was integrated by mentor Bj\u00f6rn Linse into the Nvim master branch, providing the foundation for the floating windows feature. This demo shows the feature being used in a popular plugin to reveal documentation with completion results:","title":"Results from last year"},{"location":"news/2019-03-17-newsletter/#looking-forward","text":"Our mentors are looking forward to your GSoC proposals in the next weeks! The best way to get familiar with Neovim development is to send a pull request to help out with a small bug or feature request. Working with students on pull requests is extremely helpful for determining mentor-student workflow.","title":"Looking forward"},{"location":"news/2020-04-14-newsletter/","text":"What is Neovim? Neovim is a fork of the venerable text-editor vim, focused on extensibility and usability. It is not a rewrite but a continuation and extension of Vim. Many clones and derivatives exist, some very clever\u2014but none are Vim. Neovim is built for users who want the good parts of Vim, and more. See a list of differences via :help vim-differences . Participating If you are interested in contributing to Neovim, visit the github page for details. We have a great test suite and automated CI, so you can just jump in and have a go. Don't be afraid to open a PR to get comments or just take advantage of the infrastructure! To get in touch with the team, join the gitter channel (also accessible via IRC ), or visit the Neovim subreddit , which many of the developers read. Taking part in conversations is a contribution, too! New contributor shoutout: @janlazo has been on a rampage for both windows support and porting neovim patches since about September 2017. Thank you! Old contributor shoutout: @jamessan has been around since March 2014, and, while being generally smart and helpful, has been doing tremendous work on the debian package of neovim. Thank you! What's new The last newsletter covered everything up to release 0.2.2 of Neovim. Two years have passed, and the project has been as busy as ever improving both user and developer experience. Along the way we released in June 2018 the version 0.3. Though this newsletter arrives late (after version 0.4 was released), we still deemed it worth to introduce 0.3 in case you missed anything (0.4 will be covered in a future newsletter): As always, check Following HEAD for any breaking changes. 0.3 for Users A lot of work has been put into making Neovim work better with different terminal emulators, and is still ongoing ( @justinmk , #7664 , #7653 , #7720 , #7640 , #7624 , @florolf , #7676 and @erw7 #8408 ) Linux Users: Snap packaging available ( @kalikiana , #7918 ) BSD Users: Support for NetBSD ( @utkarsh009 , #8197 ) Windows Users: Neovim ships with common tools ( @equalsraf, @justinmk , #6105 ) Building with VS2017 is now supported, see the wiki ( @b-r-o-c-k , 8084 ) Neovim is available on cygwin man.vim improvements, uses lua for speedup ( @keidax , #7623 ) Output from system() and :! supports multibyte chars, and also handles control chars (CR, TAB) somewhat better ( @bfredl , #7844 ) Command mappings are supported ( @bfredl , #4419 ) An unmapped META key will be interpreted as Escape ( @justinmk , #8226 ) New flag msgsep for display to avoid fullscreen scrolling for messages ( @bfredl , #8088 ) See it in action: Numbered marks are now saved in shada files ( @ZyX-I , #5908 ) The --listen command line option replaces the usage of $NVIM_LISTEN_ADDRESS ( @justinmk , #8247 ) Neovim treats stdin as text, rather than commands. If you want to run stdin as normal mode commands, use nvim -s - ( @justinmk , #7679 , @ZyX-I , #6299 and @b-r-o-c-k , #8276 ) Neovim recognizes mouse events in (u)rxvt ( @symphorien , #8309 ) Macros apply :lmap when executing ( @hardenedapple , #5658 ) defaults: do :filetype stuff unless explicitly \"off\" ( @justinmk , #7809 ) new defaults for fillchars ( @teto , @justinmk , #8035 ) maxmem and maxmemtot have been removed ( @philix , #4486 ) 0.3 for Developers The list implementation has been hidden behind an API to foster further improvements ( @ZyX-l , #7708 ). Developers, in particular people that port patches from vim, should have a look at the wiki page . Changed API functions: nvim_command_output ( @justinmk , #7821 ) vim_fgets ( @mhinz , #8228 ) New API functions: nvim_list_uis @geekodour , #8004 ) nvim_get_commands ( @nimitbhardwaj , @justinmk , #8375 ) stdpath ( @docwhat , #6272 ) nvim_set_client_info , nvim_get_chan_info and nvim_list_chans ( @bfredl , #6743 ) nvim_buf_attach / -detach implement buffer change notifications. Using these functions, you can subscribe to events that are sent when a buffer has been updated, no matter the source or method ( @phodge , @KillTheMule , #7917 ) Channels: support buffered output and bytes sockets/stdio ( @bfredl , #6844 ) A proper viml expression parser is now available ( @ZyX-l , #7234 ) It comes with various highlight groups, have a look at the following screen recording: The near future: Upcoming Floating Windows for external UI's ( @bfredl , #6619 ) Extended Marks ( @timeyyy , #5031 ) Built in LSP support ( @tjdevries , #6856 ) (see http://langserver.org/ why that could be of interest to you) Around Neovim GSOC Neovim had been accepted into the Google Summer of Code(GSOC) . We've had two students working on interesting developments: @UtkarshMe worked on extending the UI protocol and externalizing window layout and control . Be sure to check out his blog for a summary! @b-r-o-c-k previously active on the windows front before, implemented a .NET API client for Neovim. Thanks for your awesome contributions, and thanks to the mentors @bfredl and @justinmk! Related projects The wiki page of related projects is an evergrowing list of projects that somehow make use of Neovim's extended capabilities. Here's a gist of additions since the last newsletter: Plugins The following plugins have found their way into our wiki : neomake-multiprocess : A vim plugin for running multiple process asynchronously based on neomake neopipe : send lines of text to an external command and display output in a scratch buffer nuake : A Quake-style terminal panel for Neovim semshi : Semantic Highlighting for Python vim-ghost : Neovim client for GhostText browser extension ( firefox and chrome ) API Clients If you thought 3 C++ clients wasn't enough, you will be happy to hear that a 4th contender has entered the arena: magnum-neovim-api If you happen to prefer a language with no API client listed, a good starting point are the docs , and be sure to come talk about it on the gitter channel . GUIs Three new GUIs were added since the last newsletter: javafx sassanh/qnvim vv Blog posts Some blog posts that talk about some specifically Neovim things: Testing plugins from Neovim walks you through using the Neovim test infrastructure for your plugin Rpc benchmarks shows and benchmarks different approaches in using the RPC API to create folds from a plugin. Neovim for Haskell Development shows how Neovim can help you with your haskell development needs Featured project For quite some time @mhinz has been maintaining neovim-remote . While only available on unices (though windows support is on the table), it solves some use cases people ask about frequently, such as: How can I open a file in an already existing Neovim instance? How can I open a file from a Neovim terminal without nesting editor instances? How can I remotely send a command to a running Neovim instance? To whet your appetite, here's a little gif Something missing? Know more than the wiki? Just edit the page to let the world know! Stats Changes lines since the last newsletter: git log --since=\"2017-12-16\" --numstat --pretty=tformat: --numstat|gawk '{ add += $1; subs += $2; loc += $1 - $2 } END { printf \"added lines: %s removed lines: %s total lines: %s\\n\", add, subs, loc }' added lines: 109127 removed lines: 40267 total lines: 68860 Merged commits: git log --since=\"2017-12-16\"|wc -l 24167 Different commit authors: git shortlog -e -s -n --since=\"2017-12-16\"|wc -l 129 Documentation changes: git log --since=\"2017-12-16\" --numstat --pretty=tformat: --numstat runtime/doc|gawk '{ add += $1; subs += $2; loc += $1 - $2 } END { printf \"added lines: %s removed lines: %s total lines: %s\\n\", add, subs, loc }' added lines: 4369 removed lines: 3645 total lines: 724 Thanks Thank you contributors, sponsors, bug-reporters, supporters. Thank you @justinmk for the awesome project and thank you @brammool for your foundational work.","title":"Newsletter #9 - Three's company"},{"location":"news/2020-04-14-newsletter/#what-is-neovim","text":"Neovim is a fork of the venerable text-editor vim, focused on extensibility and usability. It is not a rewrite but a continuation and extension of Vim. Many clones and derivatives exist, some very clever\u2014but none are Vim. Neovim is built for users who want the good parts of Vim, and more. See a list of differences via :help vim-differences .","title":"What is Neovim?"},{"location":"news/2020-04-14-newsletter/#participating","text":"If you are interested in contributing to Neovim, visit the github page for details. We have a great test suite and automated CI, so you can just jump in and have a go. Don't be afraid to open a PR to get comments or just take advantage of the infrastructure! To get in touch with the team, join the gitter channel (also accessible via IRC ), or visit the Neovim subreddit , which many of the developers read. Taking part in conversations is a contribution, too! New contributor shoutout: @janlazo has been on a rampage for both windows support and porting neovim patches since about September 2017. Thank you! Old contributor shoutout: @jamessan has been around since March 2014, and, while being generally smart and helpful, has been doing tremendous work on the debian package of neovim. Thank you!","title":"Participating"},{"location":"news/2020-04-14-newsletter/#whats-new","text":"The last newsletter covered everything up to release 0.2.2 of Neovim. Two years have passed, and the project has been as busy as ever improving both user and developer experience. Along the way we released in June 2018 the version 0.3. Though this newsletter arrives late (after version 0.4 was released), we still deemed it worth to introduce 0.3 in case you missed anything (0.4 will be covered in a future newsletter): As always, check Following HEAD for any breaking changes.","title":"What's new"},{"location":"news/2020-04-14-newsletter/#03-for-users","text":"A lot of work has been put into making Neovim work better with different terminal emulators, and is still ongoing ( @justinmk , #7664 , #7653 , #7720 , #7640 , #7624 , @florolf , #7676 and @erw7 #8408 ) Linux Users: Snap packaging available ( @kalikiana , #7918 ) BSD Users: Support for NetBSD ( @utkarsh009 , #8197 ) Windows Users: Neovim ships with common tools ( @equalsraf, @justinmk , #6105 ) Building with VS2017 is now supported, see the wiki ( @b-r-o-c-k , 8084 ) Neovim is available on cygwin man.vim improvements, uses lua for speedup ( @keidax , #7623 ) Output from system() and :! supports multibyte chars, and also handles control chars (CR, TAB) somewhat better ( @bfredl , #7844 ) Command mappings are supported ( @bfredl , #4419 ) An unmapped META key will be interpreted as Escape ( @justinmk , #8226 ) New flag msgsep for display to avoid fullscreen scrolling for messages ( @bfredl , #8088 ) See it in action: Numbered marks are now saved in shada files ( @ZyX-I , #5908 ) The --listen command line option replaces the usage of $NVIM_LISTEN_ADDRESS ( @justinmk , #8247 ) Neovim treats stdin as text, rather than commands. If you want to run stdin as normal mode commands, use nvim -s - ( @justinmk , #7679 , @ZyX-I , #6299 and @b-r-o-c-k , #8276 ) Neovim recognizes mouse events in (u)rxvt ( @symphorien , #8309 ) Macros apply :lmap when executing ( @hardenedapple , #5658 ) defaults: do :filetype stuff unless explicitly \"off\" ( @justinmk , #7809 ) new defaults for fillchars ( @teto , @justinmk , #8035 ) maxmem and maxmemtot have been removed ( @philix , #4486 )","title":"0.3 for Users"},{"location":"news/2020-04-14-newsletter/#03-for-developers","text":"The list implementation has been hidden behind an API to foster further improvements ( @ZyX-l , #7708 ). Developers, in particular people that port patches from vim, should have a look at the wiki page . Changed API functions: nvim_command_output ( @justinmk , #7821 ) vim_fgets ( @mhinz , #8228 ) New API functions: nvim_list_uis @geekodour , #8004 ) nvim_get_commands ( @nimitbhardwaj , @justinmk , #8375 ) stdpath ( @docwhat , #6272 ) nvim_set_client_info , nvim_get_chan_info and nvim_list_chans ( @bfredl , #6743 ) nvim_buf_attach / -detach implement buffer change notifications. Using these functions, you can subscribe to events that are sent when a buffer has been updated, no matter the source or method ( @phodge , @KillTheMule , #7917 ) Channels: support buffered output and bytes sockets/stdio ( @bfredl , #6844 ) A proper viml expression parser is now available ( @ZyX-l , #7234 ) It comes with various highlight groups, have a look at the following screen recording:","title":"0.3 for Developers"},{"location":"news/2020-04-14-newsletter/#the-near-future-upcoming","text":"Floating Windows for external UI's ( @bfredl , #6619 ) Extended Marks ( @timeyyy , #5031 ) Built in LSP support ( @tjdevries , #6856 ) (see http://langserver.org/ why that could be of interest to you)","title":"The near future: Upcoming"},{"location":"news/2020-04-14-newsletter/#around-neovim","text":"","title":"Around Neovim"},{"location":"news/2020-04-14-newsletter/#gsoc","text":"Neovim had been accepted into the Google Summer of Code(GSOC) . We've had two students working on interesting developments: @UtkarshMe worked on extending the UI protocol and externalizing window layout and control . Be sure to check out his blog for a summary! @b-r-o-c-k previously active on the windows front before, implemented a .NET API client for Neovim. Thanks for your awesome contributions, and thanks to the mentors @bfredl and @justinmk!","title":"GSOC"},{"location":"news/2020-04-14-newsletter/#related-projects","text":"The wiki page of related projects is an evergrowing list of projects that somehow make use of Neovim's extended capabilities. Here's a gist of additions since the last newsletter:","title":"Related projects"},{"location":"news/2020-04-14-newsletter/#plugins","text":"The following plugins have found their way into our wiki : neomake-multiprocess : A vim plugin for running multiple process asynchronously based on neomake neopipe : send lines of text to an external command and display output in a scratch buffer nuake : A Quake-style terminal panel for Neovim semshi : Semantic Highlighting for Python vim-ghost : Neovim client for GhostText browser extension ( firefox and chrome )","title":"Plugins"},{"location":"news/2020-04-14-newsletter/#api-clients","text":"If you thought 3 C++ clients wasn't enough, you will be happy to hear that a 4th contender has entered the arena: magnum-neovim-api If you happen to prefer a language with no API client listed, a good starting point are the docs , and be sure to come talk about it on the gitter channel .","title":"API Clients"},{"location":"news/2020-04-14-newsletter/#guis","text":"Three new GUIs were added since the last newsletter: javafx sassanh/qnvim vv","title":"GUIs"},{"location":"news/2020-04-14-newsletter/#blog-posts","text":"Some blog posts that talk about some specifically Neovim things: Testing plugins from Neovim walks you through using the Neovim test infrastructure for your plugin Rpc benchmarks shows and benchmarks different approaches in using the RPC API to create folds from a plugin. Neovim for Haskell Development shows how Neovim can help you with your haskell development needs","title":"Blog posts"},{"location":"news/2020-04-14-newsletter/#featured-project","text":"For quite some time @mhinz has been maintaining neovim-remote . While only available on unices (though windows support is on the table), it solves some use cases people ask about frequently, such as: How can I open a file in an already existing Neovim instance? How can I open a file from a Neovim terminal without nesting editor instances? How can I remotely send a command to a running Neovim instance? To whet your appetite, here's a little gif","title":"Featured project"},{"location":"news/2020-04-14-newsletter/#something-missing","text":"Know more than the wiki? Just edit the page to let the world know!","title":"Something missing?"},{"location":"news/2020-04-14-newsletter/#stats","text":"Changes lines since the last newsletter: git log --since=\"2017-12-16\" --numstat --pretty=tformat: --numstat|gawk '{ add += $1; subs += $2; loc += $1 - $2 } END { printf \"added lines: %s removed lines: %s total lines: %s\\n\", add, subs, loc }' added lines: 109127 removed lines: 40267 total lines: 68860 Merged commits: git log --since=\"2017-12-16\"|wc -l 24167 Different commit authors: git shortlog -e -s -n --since=\"2017-12-16\"|wc -l 129 Documentation changes: git log --since=\"2017-12-16\" --numstat --pretty=tformat: --numstat runtime/doc|gawk '{ add += $1; subs += $2; loc += $1 - $2 } END { printf \"added lines: %s removed lines: %s total lines: %s\\n\", add, subs, loc }' added lines: 4369 removed lines: 3645 total lines: 724","title":"Stats"},{"location":"news/2020-04-14-newsletter/#thanks","text":"Thank you contributors, sponsors, bug-reporters, supporters. Thank you @justinmk for the awesome project and thank you @brammool for your foundational work.","title":"Thanks"},{"location":"news/2020-10-28-newsletter/","text":"What is Neovim? Neovim is a fork of the venerable text-editor vim, focused on extensibility and usability. It is not a rewrite but a continuation and extension of Vim. Many clones and derivatives exist, some very clever\u2014but none are Vim. Neovim is built for users who want the good parts of Vim, and more. See a list of differences via :help vim-differences . Participating If you are interested in contributing to Neovim, visit the github page for details. We have a great test suite and automated CI, so you can just jump in and have a go. Don't be afraid to open a PR to get comments or just take advantage of the infrastructure! To get in touch with the team, join the gitter channel (also accessible via IRC ), or visit the Neovim subreddit , which many of the developers read. Taking part in conversations is a contribution, too! What's new The last newsletter covered the release of Neovim v0.3.0, it is now time to do the same thing with the most exciting Neovim release that happened since then: v0.4.4! 0.4.4 for Users Neovim started detecting the background color of the terminal for xterm-compatible terminals ( @joshtriplett , #9509 ) The 'maxcombine' option has been removed, it now always default to 6 ( @bfredl , #7992 ) The 'fillchars' setting now has an eob option, letting users configure the character used to represent lines after the end of a buffer (previously hardcoded to ~ ) ( @FriedSock , #8546 ) F has been added to the default 'shortmess' option and S has been removed ( @justinmk , #8619 , #10136 ) The CursorLine type will now be smarter: if its foreground color is not set, the text of the CursorLine will use the CursorLine 's background color and default syntax highlighting colors as foreground ( @zhou13 , #8578 ). The terminal UI can now support undercurl and colored underline, provided that your terminal has support for that ( @blueyed , #9052 ). Neovim's 'background' setting now defaults to dark to get a consistent setting across platforms ( @justinmk , #9205 ). 'fillchars' and 'listchars' now are window-local options ( @mhinz , #9539 ). The popupmenu can now be made (pseudo) transparent ( @bfredl , #9571 ). Floating windows! This enables all kinds of useful features, such as big clocks ( @bfredl , @dzhou121 , #6619 ) Autocommands now have a ++once modifier to let them execute only once ( @justinmk , #9706 ) A new autocommand event named CompleteChanged has been implemented ( @chemzqm , #9616 ) Vim's TermDebug plugin has been ported to neovim ( @kwon-young , #8364 ). The wildmenu can now be turned into a popup menu with wildoptions=pum ( @bfredl , #9607 ). In fact, that's the default! There now are two events triggered when a UI connects to and disconnects from Neovim: UIEnter and UILeave ( @equalsraf , #6917 ). There also are TermEnter and TermLeave autocommands triggered when entering/leaving a terminal ( usama54321 , #8550 ). 0.4.4 for Developers New UI extensions: The ext_hlstate extension allows semantic identification of builtin and syntax highlights ( @bfredl , #8221 ). The ext_linegrid extension sends more gradual screen updates for improved performance ( @bfredl , #9064 ). The ext_multigrid extension introduces the concept of a \"grid\" which is just a rendering surface ( @bfredl , @UtkarshMe #8455 ). The ext_messages extension enables UIs to provide an external command line ( @bfredl , @dzhou121 #7466 ) ext_popupmenu makes neovim send information about its popup menu ( @bfredl #9607 ). New API function: nvim_buf_get_offset : returns the byte offset of a line ( @bfredl , #9180 ) nvim_buf_is_loaded : checks if a buffer is loaded ( @phodge , #7688 ). nvim_create_buf : create a new buffer ( @bredl , #9272 ) nvim_get_context / nvim_load_context : explore and restore the editor's state ( @justinmk , #10619 . nvim_input_mouse : perform mouse actions ( @bfredl , #9429 ). nvim_open_win : creating floating external windows nvim_set_keymap : sets a global mapping for a mode ( @yilin-yang , #9224 ). nvim_win_close : close a window ( @bfredl , #9667 ). nvim_win_set_buf : sets the current buffer of a window ( @justinmk , #9100 ) nvim_win_set_config : configure the layout of a window ( @mhinz , #9626 ). Changed API functions: nvim_buf_lines_event will now send events for terminal buffers ( @justinmk , #8616 ). Neovim now always waits for a UI when launched with --embed, unless --headless is also supplied ( @bfredl , #9024 ). Neovim's libuv loop has been exposed to lua as vim.loop ( @zhaozg , @andreypopp , #10123 ). What's next? Neovim contributors have been hard at work and added a lot of new features to v0.5.0 like an LSP client written in Lua and TreeSitter integration. The next Neovim release promises to be fascinating! Around Neovim Related projects The wiki page of related projects is an evergrowing list of projects that somehow make use of Neovim's extended capabilities. Here's a gist of additions since the last newsletter: Plugins The following plugins have found their way into our wiki : coc.nvim : Language Server Protocol client that aims to replicate VSCode's functionnalities markdown-preview.nvim : Provides preview of your markdown files in your browser, with synchronized scrolling. nvim-gdb : thin wrapper for GDB, LLDB and PDB nero.nvim : A REPL for Neovim neogdb.vim : Vim GDB front-end for neovim nvim-luadev : REPL for developing lua plugins Conjure : Clojure and ClojureScript tooling for Neovim over a socket Aniseed : Write plugins for Neovim in Fennel, a Lisp that compiles to Lua. nvim-luapad : Interactive real time neovim scratchpad for the embedded lua engine. API Clients Plenty of new API clients: Java: neovim-java D: viniarck/nvimhost-d Scala: viniarck/nvimhost-scala NodeJS: neoclide/neovim Dart: smolck/dart-nvim-api Ocaml: janestreet/vcaml The python client also has been renamed to \"pynvim\". GUIs Maybe 2018/2019 weren't the years of the Linux desktop, but they sure were the years of the Neovim GUI: veonim : a really cool electron-based GUI that aims to replicate the VSCode experience. DinVim Vim for Mac : A \"safe and secure\" Neovim GUI - available on the OSX app store. akiyosi/gonvim : A maintained fork of gonvim. etorth/libnvc : An easy to embed GUI based on SDL. mvilim/neovim-pytc-example : The first terminal UI for Neovim that isn't the default terminal UI! GNvim : \"GUI for neovim, without any web bloat\" written in Rust. Firenvim : A big ball of web bloat that embeds Neovim in Chrome, Firefox and other browsers. glrnvim : A terminal wrapper that launches neovim inside of alacritty. yatli/fvim : A beautiful UI written in F# - who knew functionnal languages could actually be used for writing software? Neo Vim : A new attempt at integration neovim into VSCode. kethku/neovide : A \"No nonsense Neovim client writen in rust\" with a tiny bit of cursor madness. dontpanic92/dotnvim : A C# neovim client with transparent backgrounds! Blog posts Some posts that talk specifically about Neovim things: Writing Neovim plugins in lua: https://www.2n.pl/blog/how-to-write-neovim-plugins-in-lua Writing your init.vim in lua: https://teukka.tech/luanvim.html Using Neovim's event loop from lua: https://teukka.tech/vimloop.html Stats Changed lines since the last newsletter: git log v0.3.0..v0.4.4 --numstat --pretty=tformat: --numstat | nawk '{ add += $1; subs += $2; loc += $1 - $2 } END { printf \"added lines: %s removed lines: %s total lines: %s\\n\", add, subs, loc }' added lines: 168844 removed lines: 75466 total lines: 93378 Merged commits: git log v0.3.0..v0.4.4 --pretty=oneline | wc -l 3477 Different commit authors: git shortlog -e -s -n v0.3.0..v0.4.4 | wc -l 164 Documentation changes: git log v0.3.0..v0.4.4 --numstat --pretty=tformat: --numstat runtime/doc | nawk '{ add += $1; subs += $2; loc += $1 - $2 } END { printf \"added lines: %s removed lines: %s total lines: %s\\n\", add, subs, loc }' added lines: 9226 removed lines: 7002 total lines: 2224 Thanks Thank you contributors, sponsors, bug-reporters, supporters. Note that you can now sponsor neovim via github Sponsors or on OpenCollective . Thank you @justinmk for the awesome project and thank you @brammool for your foundational work.","title":"Newsletter #10 - Neovim v0.4.4"},{"location":"news/2020-10-28-newsletter/#what-is-neovim","text":"Neovim is a fork of the venerable text-editor vim, focused on extensibility and usability. It is not a rewrite but a continuation and extension of Vim. Many clones and derivatives exist, some very clever\u2014but none are Vim. Neovim is built for users who want the good parts of Vim, and more. See a list of differences via :help vim-differences .","title":"What is Neovim?"},{"location":"news/2020-10-28-newsletter/#participating","text":"If you are interested in contributing to Neovim, visit the github page for details. We have a great test suite and automated CI, so you can just jump in and have a go. Don't be afraid to open a PR to get comments or just take advantage of the infrastructure! To get in touch with the team, join the gitter channel (also accessible via IRC ), or visit the Neovim subreddit , which many of the developers read. Taking part in conversations is a contribution, too!","title":"Participating"},{"location":"news/2020-10-28-newsletter/#whats-new","text":"The last newsletter covered the release of Neovim v0.3.0, it is now time to do the same thing with the most exciting Neovim release that happened since then: v0.4.4!","title":"What's new"},{"location":"news/2020-10-28-newsletter/#044-for-users","text":"Neovim started detecting the background color of the terminal for xterm-compatible terminals ( @joshtriplett , #9509 ) The 'maxcombine' option has been removed, it now always default to 6 ( @bfredl , #7992 ) The 'fillchars' setting now has an eob option, letting users configure the character used to represent lines after the end of a buffer (previously hardcoded to ~ ) ( @FriedSock , #8546 ) F has been added to the default 'shortmess' option and S has been removed ( @justinmk , #8619 , #10136 ) The CursorLine type will now be smarter: if its foreground color is not set, the text of the CursorLine will use the CursorLine 's background color and default syntax highlighting colors as foreground ( @zhou13 , #8578 ). The terminal UI can now support undercurl and colored underline, provided that your terminal has support for that ( @blueyed , #9052 ). Neovim's 'background' setting now defaults to dark to get a consistent setting across platforms ( @justinmk , #9205 ). 'fillchars' and 'listchars' now are window-local options ( @mhinz , #9539 ). The popupmenu can now be made (pseudo) transparent ( @bfredl , #9571 ). Floating windows! This enables all kinds of useful features, such as big clocks ( @bfredl , @dzhou121 , #6619 ) Autocommands now have a ++once modifier to let them execute only once ( @justinmk , #9706 ) A new autocommand event named CompleteChanged has been implemented ( @chemzqm , #9616 ) Vim's TermDebug plugin has been ported to neovim ( @kwon-young , #8364 ). The wildmenu can now be turned into a popup menu with wildoptions=pum ( @bfredl , #9607 ). In fact, that's the default! There now are two events triggered when a UI connects to and disconnects from Neovim: UIEnter and UILeave ( @equalsraf , #6917 ). There also are TermEnter and TermLeave autocommands triggered when entering/leaving a terminal ( usama54321 , #8550 ).","title":"0.4.4 for Users"},{"location":"news/2020-10-28-newsletter/#044-for-developers","text":"New UI extensions: The ext_hlstate extension allows semantic identification of builtin and syntax highlights ( @bfredl , #8221 ). The ext_linegrid extension sends more gradual screen updates for improved performance ( @bfredl , #9064 ). The ext_multigrid extension introduces the concept of a \"grid\" which is just a rendering surface ( @bfredl , @UtkarshMe #8455 ). The ext_messages extension enables UIs to provide an external command line ( @bfredl , @dzhou121 #7466 ) ext_popupmenu makes neovim send information about its popup menu ( @bfredl #9607 ). New API function: nvim_buf_get_offset : returns the byte offset of a line ( @bfredl , #9180 ) nvim_buf_is_loaded : checks if a buffer is loaded ( @phodge , #7688 ). nvim_create_buf : create a new buffer ( @bredl , #9272 ) nvim_get_context / nvim_load_context : explore and restore the editor's state ( @justinmk , #10619 . nvim_input_mouse : perform mouse actions ( @bfredl , #9429 ). nvim_open_win : creating floating external windows nvim_set_keymap : sets a global mapping for a mode ( @yilin-yang , #9224 ). nvim_win_close : close a window ( @bfredl , #9667 ). nvim_win_set_buf : sets the current buffer of a window ( @justinmk , #9100 ) nvim_win_set_config : configure the layout of a window ( @mhinz , #9626 ). Changed API functions: nvim_buf_lines_event will now send events for terminal buffers ( @justinmk , #8616 ). Neovim now always waits for a UI when launched with --embed, unless --headless is also supplied ( @bfredl , #9024 ). Neovim's libuv loop has been exposed to lua as vim.loop ( @zhaozg , @andreypopp , #10123 ).","title":"0.4.4 for Developers"},{"location":"news/2020-10-28-newsletter/#whats-next","text":"Neovim contributors have been hard at work and added a lot of new features to v0.5.0 like an LSP client written in Lua and TreeSitter integration. The next Neovim release promises to be fascinating!","title":"What's next?"},{"location":"news/2020-10-28-newsletter/#around-neovim","text":"","title":"Around Neovim"},{"location":"news/2020-10-28-newsletter/#related-projects","text":"The wiki page of related projects is an evergrowing list of projects that somehow make use of Neovim's extended capabilities. Here's a gist of additions since the last newsletter:","title":"Related projects"},{"location":"news/2020-10-28-newsletter/#plugins","text":"The following plugins have found their way into our wiki : coc.nvim : Language Server Protocol client that aims to replicate VSCode's functionnalities markdown-preview.nvim : Provides preview of your markdown files in your browser, with synchronized scrolling. nvim-gdb : thin wrapper for GDB, LLDB and PDB nero.nvim : A REPL for Neovim neogdb.vim : Vim GDB front-end for neovim nvim-luadev : REPL for developing lua plugins Conjure : Clojure and ClojureScript tooling for Neovim over a socket Aniseed : Write plugins for Neovim in Fennel, a Lisp that compiles to Lua. nvim-luapad : Interactive real time neovim scratchpad for the embedded lua engine.","title":"Plugins"},{"location":"news/2020-10-28-newsletter/#api-clients","text":"Plenty of new API clients: Java: neovim-java D: viniarck/nvimhost-d Scala: viniarck/nvimhost-scala NodeJS: neoclide/neovim Dart: smolck/dart-nvim-api Ocaml: janestreet/vcaml The python client also has been renamed to \"pynvim\".","title":"API Clients"},{"location":"news/2020-10-28-newsletter/#guis","text":"Maybe 2018/2019 weren't the years of the Linux desktop, but they sure were the years of the Neovim GUI: veonim : a really cool electron-based GUI that aims to replicate the VSCode experience. DinVim Vim for Mac : A \"safe and secure\" Neovim GUI - available on the OSX app store. akiyosi/gonvim : A maintained fork of gonvim. etorth/libnvc : An easy to embed GUI based on SDL. mvilim/neovim-pytc-example : The first terminal UI for Neovim that isn't the default terminal UI! GNvim : \"GUI for neovim, without any web bloat\" written in Rust. Firenvim : A big ball of web bloat that embeds Neovim in Chrome, Firefox and other browsers. glrnvim : A terminal wrapper that launches neovim inside of alacritty. yatli/fvim : A beautiful UI written in F# - who knew functionnal languages could actually be used for writing software? Neo Vim : A new attempt at integration neovim into VSCode. kethku/neovide : A \"No nonsense Neovim client writen in rust\" with a tiny bit of cursor madness. dontpanic92/dotnvim : A C# neovim client with transparent backgrounds!","title":"GUIs"},{"location":"news/2020-10-28-newsletter/#blog-posts","text":"Some posts that talk specifically about Neovim things: Writing Neovim plugins in lua: https://www.2n.pl/blog/how-to-write-neovim-plugins-in-lua Writing your init.vim in lua: https://teukka.tech/luanvim.html Using Neovim's event loop from lua: https://teukka.tech/vimloop.html","title":"Blog posts"},{"location":"news/2020-10-28-newsletter/#stats","text":"Changed lines since the last newsletter: git log v0.3.0..v0.4.4 --numstat --pretty=tformat: --numstat | nawk '{ add += $1; subs += $2; loc += $1 - $2 } END { printf \"added lines: %s removed lines: %s total lines: %s\\n\", add, subs, loc }' added lines: 168844 removed lines: 75466 total lines: 93378 Merged commits: git log v0.3.0..v0.4.4 --pretty=oneline | wc -l 3477 Different commit authors: git shortlog -e -s -n v0.3.0..v0.4.4 | wc -l 164 Documentation changes: git log v0.3.0..v0.4.4 --numstat --pretty=tformat: --numstat runtime/doc | nawk '{ add += $1; subs += $2; loc += $1 - $2 } END { printf \"added lines: %s removed lines: %s total lines: %s\\n\", add, subs, loc }' added lines: 9226 removed lines: 7002 total lines: 2224","title":"Stats"},{"location":"news/2020-10-28-newsletter/#thanks","text":"Thank you contributors, sponsors, bug-reporters, supporters. Note that you can now sponsor neovim via github Sponsors or on OpenCollective . Thank you @justinmk for the awesome project and thank you @brammool for your foundational work.","title":"Thanks"},{"location":"news/2021-07-12-newsletter/","text":"The real 0.5 was the friends we made along the way The long-awaited release of Neovim v0.5.0 finally happened on July 2, 2021. It took longer than everybody had hoped for, but it was worth the wait: With over 4000 commits, it is so big that it broke some of the release tooling. So these notes will not be able to touch on each of the many changes that were made over the course of development and only focus on the most user-visible improvements, of which the biggest are 1. Lua as a first-class scripting and configuration language, 2. Language server protocol (LSP), 3. Treesitter (early access). Lua everywhere! Neovim 0.5 went far in making Lua a first-class scripting language for Neovim, both for plugin development and for user configuration. As a reminder, Lua is a small scripting language designed for embedding and is often used in, e.g., game development. Furthermore, there is a just-in-time compiler ( LuaJIT , which Neovim is built with on platforms where it is available) that can provide impressive performance on relevant tasks. In essence, Lua was chosen over other languages because it is 1. tiny -- perfect for embedding (as opposed to a remote plugin host), 2. fast -- LuaJIT can be orders of magnitude faster than Vimscript (and non-JITed Lua), 3. simple -- small but expressive syntax (Lua 5.1) made for scripting, with Neovim itself providing a \"standard library\" by exposing internal functions via an API. For more details on this choice, see Justin M Keyes' presentation at Vim Conf 2019 and TJ DeVries' presentation at Vimconf.live . Let's look at what this means for plugin authors and users. Lua plugins Neovim exposes its API natively to Lua via, e.g., vim.api.nvim_open_win() . It also provides methods for accessing vimscript (ex) commands and variables via, e.g., vim.cmd(\"echo 'foo'\") and vim.g.syntax_on , respectively. This allows writing plugins with the same capabilities as those written in Vimscript while exploiting the performance of Lua(JIT) at core programming language tasks like loops. It is also possible to make use of Lua's own luarocks plugin ecosystem. Correspondingly, over the course of the 0.5 development cycle, there has been an explosion in the number of Lua plugins, ranging from rewrites of popular Vimscript plugins to completely new ones that would not have been possible in Vimscript -- often from contributors who were completely new to (neo)vim plugin development and were averse to learning Vimscript for that task. As a positive side effect of the long development cycle, many of these are already fully-featured and stable at the time of the 0.5 release! Here is a small and non-representative list of Lua plugins: Plenary -- A library of useful utilities for developing Neovim plugins (some of which will later be integrated into core). Packer -- A package manager with support for plugin dependencies, lazy-loading, and installing luarocks. Telescope -- A highly extendable fuzzy finder over lists. Gitsigns -- A plugin for showing and interacting with changes on files in a git repository (asynchronously). Nvim-compe -- An auto completion framework for various sources, including Neovim's builtin LSP client. Nvim-dap -- A debug adapter protocol implementation for step-through debugging of your code. Colorizer -- A high-performance color highlighter for Neovim without any external dependencies. Formatter -- A plugin for asynchronously executing external formatting tools on the current buffer or range. Hop.nvim - An EasyMotion -like movement plugin that does not need to mess with your buffer. Neogit - A Magit -like Git interface. A much more comprehensive list of Neovim plugins can be found at the user-contributed Awesome Neovim collection. Not all of these plugins are actually written in Lua: there are many other languages (some of which are typed) that compile to Lua, e.g., - Fennel(Lisp) via Aniseed or Fennel-nvim , - Teal , - Amulet ML , - MoonScript via nvim-moonmaker , - Vim9script (as a proof of concept). Lua config It is also possible to write user configuration in Lua: If there is an init.lua , it is read instead of init.vim (these cannot coexist, and having both in your config directory will give an error), and .lua files in runtime directories ( plugin/ , colorscheme/ , after/ etc.) are sourced in addition to (after) Vimscript files. Note that this is entirely optional and not needed to enjoy the new functions introduced in Neovim 0.5; furthermore, not every Vimscript configuration option has a fully native Lua equivalent yet. Extending the native API to cover these as well is part of the goal for Neovim 0.6. For a comprehensive and up-to-date guide on using Lua for Neovim scripting and configuration, see Getting started using Lua in Neovim . A good model for a Lua configuration using init.lua is Defaults.nvim . Language Server Protocol (LSP) The Language Server Protocol (LSP) is an open, JSON-RPC-based protocol for communication between code editors and language servers, which provide programming language-specific features such as completion, hover/tooltips, go to definition, show/go to references, show method signatures, rename, code actions (automatic formatting, organize imports, ...), and more. The idea is to separate these features into an editor-independent but language-specific server and a language-independent but editor-specific client, which communicate via the Language Server Protocol over RPC. (It should be pointed out that not every server implements every feature, and the quality of the responses can vary wildly. The \"reference implementation\" in VS Code also often adds non-standard features that are not covered by the LSP itself.) Neovim 0.5 provides an LSP client written (mostly) in Lua that provides a highly configurable and extensible way of accessing these features. It does not aim at competing with more feature-rich and \"out-of-the-box\" plugins like CoC.nvim but is meant to be tailored to your preferences (while still being useable with reasonable defaults). For an overview, see TJ DeVries' Vimconf.live presentation and his shorter video . For many language servers, Nvim-lspconfig already provides the necessary configuration to set everything up easily. Alternatively, some languages also have specific LSP plugins that provide a more integrated setup, e.g., for Java and Scala . To learn more about LSP and how to use it in Neovim, visit Nvim-lspconfig (including its Wiki ) and read :h lsp . Expect more work on LSP during the 0.5.x development cycle to provide improved configuration options and better coverage of the latest LSP specification (version 3.16 at the point of writing), including semantic highlighting. Tree-sitter Neovim 0.5 adds experimental support for tree-sitter, a library that parses a piece of code into a syntax tree in an incremental and error-resilient way; this means that reparsing that code after an edit is very fast, and parsing error due to, e.g., typos remain localized and do not break parsing further down. This tree can then be efficiently queried to obtain syntax information about the code. This allows for improved and/or faster syntax highlighting, code navigation, refactoring, text objects and motions, searching and replacing, and more. Tree-sitter also makes it easy to highlight parts of a file differently if they contain code in a different language. To learn more about tree-sitter, watch Tree-sitter - A new parsing system for programming tools - Max Brunsfield . The goal is to replace the current vim regular expression-based syntax with tree-sitter, not only for better and faster syntax highlighting but also for new and improved ways of structured text editing. However, tree-sitter support in 0.5 should still be considered as \"early access\": It works well enough to test out and see what is possible, but it should not be relied on for productive use due to a number of serious bugs and performance regressions that need to be addressed before tree-sitter in Neovim can be declared stable. Note also that enabling tree-sitter based highlighting for a language currently disables the internal regex-based syntax engine completely for this file type, which may break other features that rely on it. Fixing these issues and improving the API will be a major focus of the development cycle leading up to the 0.6 release. Also, Neovim itself only provides a (Lua) API for generating and querying the syntax tree using the bundled tree-sitter library; see :h treesitter . User-facing features like the ones mentioned above are implemented in plugins like Nvim-treesitter -- Highlighting, folds, incremental selection. Playground -- Utility functions to easily show the parsed tree and run queries against it. Nvim-treesitter-textobjects -- Better text objects for vim-style motions and operators. Nvim-refactor -- Highlight definitions, navigation, smart rename. Architext -- structural text editing (i.e., syntax-aware search and replace). More information on using these features can be found in the Nvim-treesitter README or by watching Thomas Vigouroux's Vimconf.live presentation . What's the difference between LSP and tree-sitter? This is a common question, especially since LSP as of version 3.16 provides \"semantic highlighting\". In short, tree-sitter operates on a single file, parsing the file into a syntax tree which is used to support the variety of enhanced code navigation and manipulation functions. On the other hand, language servers operate across multiple files and project libraries, using various different, server-dependent, methods for parsing each file's syntax tree. (Of course, tree-sitter is one possible choice for this purpose, and is in fact used by, e.g., bash-language-server and wasm-language-server .) In particular, this means that language servers can use semantic information from a different file to annotate the tree for the current file: For example, a variable declared as const in one file can be highlighted in red if it is used in a different file -- something that tree-sitter cannot do since it only has access to the latter file when highlighting. For more details, watch TJ DeVries' presentation on this topic . Other changes Of course, these were not the only major changes in 0.5 . Here is a short summary of representative new features. Decorations There is an improved decoration provider API that allows setting and interacting with extmarks (invisible anchored text markers that move when surrounding text is edited), virtual text (text overlays that can now be drawn at any position on screen), and highlights (which is heavily leveraged by nvim-treesitter). The following notification mockups taken from a Discourse post by @sunjon show what can be achieved with this API in combination with LuaJIT: Floats The API for floating windows now includes a \"z-index\" (allowing for control over how floating windows stack) and support for borders. Highlight on yank Neovim now has a built-in function to briefly highlight the yanked region (similarly to https://github.com/machakann/vim-highlightedyank ), configurable from Lua. To use it, you can add the following to your init.vim : au TextYankPost * lua vim.highlight.on_yank {higroup=\"IncSearch\", timeout=150, on_visual=true} See :h vim.highlight.on_yank() for more configuration options. Vim patches Of the over 4000 commits in this release, about 1000 were patches and runtime updates ported from Vim -- nearly all of them by or with the help of the amazing @janlazo . In particular, the runtime files (syntax files, documentation, etc.) are fully synced with Vim up to May 2021 , with many later changes already included as well. Community In keeping with the motto of this newsletter, one of the most noticeable positive changes was the growth of the community and of new ways of interacting with it. Discourse Previously, support requests and discussions were spread across Reddit, Gitter, and GitHub Discussions and were either ephemeral or hard to search for. We have now consolidated around a new Neovim Discourse , which is a free and open source forum platform with mailing list and RSS features, in addition to a nice web interface. The Neovim Discourse is an official core project and moderated by core team members. Matrix The official chatroom for Neovim is on Gitter . After the acquisition of Gitter by Matrix (a federated chat protocol), this room can now also be accessed from Matrix ; it is also bridged to the IRC network Libera.chat . Due to the increasing number of users, there are now additional, more specific rooms for development of and around neovim , GUIs , and off-topic chat . (The links above are to the rooms accessed through Element , a web-based Matrix client; you can also access it through any of the many other Matrix clients .) Vimconf.live Due to the global COVID-19 pandemic, VimConf 2020 unfortunately had to be canceled. In its place, a virtual Vimconf.live conference was held, with 16 speakers and over 1000 registered participants from 12 countries. If you have missed it, you can watch the lectures on the Youtube playlist . Twitch Another effect of the pandemic was the rise of interest in the live streaming of open source development on Twitch . Many of the speakers at Vimconf.live are active streamers; in particularly, TJ DeVries regularly streams his work on Neovim as \"open open source\", and the release of Neovim 0.5 was streamed live on his channel . Neovim development The number of people active in Neovim development also grew. Between 0.4.4 and 0.5.0, there were 301 unique commit authors, compared to 112 between 0.3.8 and 0.4.4 (a comparable time frame). Sponsorship You can now sponsor Neovim via Github Sponsors or OpenCollective . ( BountySource began introducing worrying changes to their Terms of Service agreement and is therefore no longer recommended.) What's next? As already mentioned, further improvements to the headlight features introduced in 0.5 will happen over the 0.5.x release cycle: Lua API -- Support for more native Lua objects ( autocommands , mappings , commands ). LSP -- Improved configuration API, full 3.16 compliance (including semantic highlighting ). Making tree-sitter a stable and faster replacement for syntax highlighting (and beyond) is the major goal for the 0.6.0 release. This includes fundamental work on the decorations API to allow for things like in-line folding or inserting virtual lines and columns (\"anti-conceal\"). Beyond that, notable goals are better file change detection as well as further decoupling the TUI (terminal UI) from the Neovim core with the goal of allowing remote TUI instances. Finally, we are aiming for more regular and frequent releases (at least for patch versions), which will hopefully remove the need for a \"neovim 0.6 when?\" meme for a change. Thanks A big thank you to everyone involved in the project that helped make Neovim 0.5 a reality -- be they contributors, sponsors, bug-reporters, or supporters. In lieu of full credits, here are some of the people you can thank for the features listed in this letter: @tjdevries , @h-michael , @norcalli , and @mjlbach for the LSP client; @vigoux , @bfredl , @theHamsta and the nvim-treesitter team for the tree-sitter integration; @janlazo for the tireless (and often thankless) work of porting patches and runtime updates from vim; and last but not least @bfredl for the decorations API, floating windows, a variety of similar feats of C-code wizardry, and for taking :smile seriously. Finally, thank you to @justinmk and @brammool for your foundational work and your vision -- the *vim community is stronger together!","title":"Neovim News #11 - The Christmas Issue"},{"location":"news/2021-07-12-newsletter/#lua-everywhere","text":"Neovim 0.5 went far in making Lua a first-class scripting language for Neovim, both for plugin development and for user configuration. As a reminder, Lua is a small scripting language designed for embedding and is often used in, e.g., game development. Furthermore, there is a just-in-time compiler ( LuaJIT , which Neovim is built with on platforms where it is available) that can provide impressive performance on relevant tasks. In essence, Lua was chosen over other languages because it is 1. tiny -- perfect for embedding (as opposed to a remote plugin host), 2. fast -- LuaJIT can be orders of magnitude faster than Vimscript (and non-JITed Lua), 3. simple -- small but expressive syntax (Lua 5.1) made for scripting, with Neovim itself providing a \"standard library\" by exposing internal functions via an API. For more details on this choice, see Justin M Keyes' presentation at Vim Conf 2019 and TJ DeVries' presentation at Vimconf.live . Let's look at what this means for plugin authors and users.","title":"Lua everywhere!"},{"location":"news/2021-07-12-newsletter/#lua-plugins","text":"Neovim exposes its API natively to Lua via, e.g., vim.api.nvim_open_win() . It also provides methods for accessing vimscript (ex) commands and variables via, e.g., vim.cmd(\"echo 'foo'\") and vim.g.syntax_on , respectively. This allows writing plugins with the same capabilities as those written in Vimscript while exploiting the performance of Lua(JIT) at core programming language tasks like loops. It is also possible to make use of Lua's own luarocks plugin ecosystem. Correspondingly, over the course of the 0.5 development cycle, there has been an explosion in the number of Lua plugins, ranging from rewrites of popular Vimscript plugins to completely new ones that would not have been possible in Vimscript -- often from contributors who were completely new to (neo)vim plugin development and were averse to learning Vimscript for that task. As a positive side effect of the long development cycle, many of these are already fully-featured and stable at the time of the 0.5 release! Here is a small and non-representative list of Lua plugins: Plenary -- A library of useful utilities for developing Neovim plugins (some of which will later be integrated into core). Packer -- A package manager with support for plugin dependencies, lazy-loading, and installing luarocks. Telescope -- A highly extendable fuzzy finder over lists. Gitsigns -- A plugin for showing and interacting with changes on files in a git repository (asynchronously). Nvim-compe -- An auto completion framework for various sources, including Neovim's builtin LSP client. Nvim-dap -- A debug adapter protocol implementation for step-through debugging of your code. Colorizer -- A high-performance color highlighter for Neovim without any external dependencies. Formatter -- A plugin for asynchronously executing external formatting tools on the current buffer or range. Hop.nvim - An EasyMotion -like movement plugin that does not need to mess with your buffer. Neogit - A Magit -like Git interface. A much more comprehensive list of Neovim plugins can be found at the user-contributed Awesome Neovim collection. Not all of these plugins are actually written in Lua: there are many other languages (some of which are typed) that compile to Lua, e.g., - Fennel(Lisp) via Aniseed or Fennel-nvim , - Teal , - Amulet ML , - MoonScript via nvim-moonmaker , - Vim9script (as a proof of concept).","title":"Lua plugins"},{"location":"news/2021-07-12-newsletter/#lua-config","text":"It is also possible to write user configuration in Lua: If there is an init.lua , it is read instead of init.vim (these cannot coexist, and having both in your config directory will give an error), and .lua files in runtime directories ( plugin/ , colorscheme/ , after/ etc.) are sourced in addition to (after) Vimscript files. Note that this is entirely optional and not needed to enjoy the new functions introduced in Neovim 0.5; furthermore, not every Vimscript configuration option has a fully native Lua equivalent yet. Extending the native API to cover these as well is part of the goal for Neovim 0.6. For a comprehensive and up-to-date guide on using Lua for Neovim scripting and configuration, see Getting started using Lua in Neovim . A good model for a Lua configuration using init.lua is Defaults.nvim .","title":"Lua config"},{"location":"news/2021-07-12-newsletter/#language-server-protocol-lsp","text":"The Language Server Protocol (LSP) is an open, JSON-RPC-based protocol for communication between code editors and language servers, which provide programming language-specific features such as completion, hover/tooltips, go to definition, show/go to references, show method signatures, rename, code actions (automatic formatting, organize imports, ...), and more. The idea is to separate these features into an editor-independent but language-specific server and a language-independent but editor-specific client, which communicate via the Language Server Protocol over RPC. (It should be pointed out that not every server implements every feature, and the quality of the responses can vary wildly. The \"reference implementation\" in VS Code also often adds non-standard features that are not covered by the LSP itself.) Neovim 0.5 provides an LSP client written (mostly) in Lua that provides a highly configurable and extensible way of accessing these features. It does not aim at competing with more feature-rich and \"out-of-the-box\" plugins like CoC.nvim but is meant to be tailored to your preferences (while still being useable with reasonable defaults). For an overview, see TJ DeVries' Vimconf.live presentation and his shorter video . For many language servers, Nvim-lspconfig already provides the necessary configuration to set everything up easily. Alternatively, some languages also have specific LSP plugins that provide a more integrated setup, e.g., for Java and Scala . To learn more about LSP and how to use it in Neovim, visit Nvim-lspconfig (including its Wiki ) and read :h lsp . Expect more work on LSP during the 0.5.x development cycle to provide improved configuration options and better coverage of the latest LSP specification (version 3.16 at the point of writing), including semantic highlighting.","title":"Language Server Protocol (LSP)"},{"location":"news/2021-07-12-newsletter/#tree-sitter","text":"Neovim 0.5 adds experimental support for tree-sitter, a library that parses a piece of code into a syntax tree in an incremental and error-resilient way; this means that reparsing that code after an edit is very fast, and parsing error due to, e.g., typos remain localized and do not break parsing further down. This tree can then be efficiently queried to obtain syntax information about the code. This allows for improved and/or faster syntax highlighting, code navigation, refactoring, text objects and motions, searching and replacing, and more. Tree-sitter also makes it easy to highlight parts of a file differently if they contain code in a different language. To learn more about tree-sitter, watch Tree-sitter - A new parsing system for programming tools - Max Brunsfield . The goal is to replace the current vim regular expression-based syntax with tree-sitter, not only for better and faster syntax highlighting but also for new and improved ways of structured text editing. However, tree-sitter support in 0.5 should still be considered as \"early access\": It works well enough to test out and see what is possible, but it should not be relied on for productive use due to a number of serious bugs and performance regressions that need to be addressed before tree-sitter in Neovim can be declared stable. Note also that enabling tree-sitter based highlighting for a language currently disables the internal regex-based syntax engine completely for this file type, which may break other features that rely on it. Fixing these issues and improving the API will be a major focus of the development cycle leading up to the 0.6 release. Also, Neovim itself only provides a (Lua) API for generating and querying the syntax tree using the bundled tree-sitter library; see :h treesitter . User-facing features like the ones mentioned above are implemented in plugins like Nvim-treesitter -- Highlighting, folds, incremental selection. Playground -- Utility functions to easily show the parsed tree and run queries against it. Nvim-treesitter-textobjects -- Better text objects for vim-style motions and operators. Nvim-refactor -- Highlight definitions, navigation, smart rename. Architext -- structural text editing (i.e., syntax-aware search and replace). More information on using these features can be found in the Nvim-treesitter README or by watching Thomas Vigouroux's Vimconf.live presentation .","title":"Tree-sitter"},{"location":"news/2021-07-12-newsletter/#whats-the-difference-between-lsp-and-tree-sitter","text":"This is a common question, especially since LSP as of version 3.16 provides \"semantic highlighting\". In short, tree-sitter operates on a single file, parsing the file into a syntax tree which is used to support the variety of enhanced code navigation and manipulation functions. On the other hand, language servers operate across multiple files and project libraries, using various different, server-dependent, methods for parsing each file's syntax tree. (Of course, tree-sitter is one possible choice for this purpose, and is in fact used by, e.g., bash-language-server and wasm-language-server .) In particular, this means that language servers can use semantic information from a different file to annotate the tree for the current file: For example, a variable declared as const in one file can be highlighted in red if it is used in a different file -- something that tree-sitter cannot do since it only has access to the latter file when highlighting. For more details, watch TJ DeVries' presentation on this topic .","title":"What's the difference between LSP and tree-sitter?"},{"location":"news/2021-07-12-newsletter/#other-changes","text":"Of course, these were not the only major changes in 0.5 . Here is a short summary of representative new features.","title":"Other changes"},{"location":"news/2021-07-12-newsletter/#decorations","text":"There is an improved decoration provider API that allows setting and interacting with extmarks (invisible anchored text markers that move when surrounding text is edited), virtual text (text overlays that can now be drawn at any position on screen), and highlights (which is heavily leveraged by nvim-treesitter). The following notification mockups taken from a Discourse post by @sunjon show what can be achieved with this API in combination with LuaJIT:","title":"Decorations"},{"location":"news/2021-07-12-newsletter/#floats","text":"The API for floating windows now includes a \"z-index\" (allowing for control over how floating windows stack) and support for borders.","title":"Floats"},{"location":"news/2021-07-12-newsletter/#highlight-on-yank","text":"Neovim now has a built-in function to briefly highlight the yanked region (similarly to https://github.com/machakann/vim-highlightedyank ), configurable from Lua. To use it, you can add the following to your init.vim : au TextYankPost * lua vim.highlight.on_yank {higroup=\"IncSearch\", timeout=150, on_visual=true} See :h vim.highlight.on_yank() for more configuration options.","title":"Highlight on yank"},{"location":"news/2021-07-12-newsletter/#vim-patches","text":"Of the over 4000 commits in this release, about 1000 were patches and runtime updates ported from Vim -- nearly all of them by or with the help of the amazing @janlazo . In particular, the runtime files (syntax files, documentation, etc.) are fully synced with Vim up to May 2021 , with many later changes already included as well.","title":"Vim patches"},{"location":"news/2021-07-12-newsletter/#community","text":"In keeping with the motto of this newsletter, one of the most noticeable positive changes was the growth of the community and of new ways of interacting with it.","title":"Community"},{"location":"news/2021-07-12-newsletter/#discourse","text":"Previously, support requests and discussions were spread across Reddit, Gitter, and GitHub Discussions and were either ephemeral or hard to search for. We have now consolidated around a new Neovim Discourse , which is a free and open source forum platform with mailing list and RSS features, in addition to a nice web interface. The Neovim Discourse is an official core project and moderated by core team members.","title":"Discourse"},{"location":"news/2021-07-12-newsletter/#matrix","text":"The official chatroom for Neovim is on Gitter . After the acquisition of Gitter by Matrix (a federated chat protocol), this room can now also be accessed from Matrix ; it is also bridged to the IRC network Libera.chat . Due to the increasing number of users, there are now additional, more specific rooms for development of and around neovim , GUIs , and off-topic chat . (The links above are to the rooms accessed through Element , a web-based Matrix client; you can also access it through any of the many other Matrix clients .)","title":"Matrix"},{"location":"news/2021-07-12-newsletter/#vimconflive","text":"Due to the global COVID-19 pandemic, VimConf 2020 unfortunately had to be canceled. In its place, a virtual Vimconf.live conference was held, with 16 speakers and over 1000 registered participants from 12 countries. If you have missed it, you can watch the lectures on the Youtube playlist .","title":"Vimconf.live"},{"location":"news/2021-07-12-newsletter/#twitch","text":"Another effect of the pandemic was the rise of interest in the live streaming of open source development on Twitch . Many of the speakers at Vimconf.live are active streamers; in particularly, TJ DeVries regularly streams his work on Neovim as \"open open source\", and the release of Neovim 0.5 was streamed live on his channel .","title":"Twitch"},{"location":"news/2021-07-12-newsletter/#neovim-development","text":"The number of people active in Neovim development also grew. Between 0.4.4 and 0.5.0, there were 301 unique commit authors, compared to 112 between 0.3.8 and 0.4.4 (a comparable time frame).","title":"Neovim development"},{"location":"news/2021-07-12-newsletter/#sponsorship","text":"You can now sponsor Neovim via Github Sponsors or OpenCollective . ( BountySource began introducing worrying changes to their Terms of Service agreement and is therefore no longer recommended.)","title":"Sponsorship"},{"location":"news/2021-07-12-newsletter/#whats-next","text":"As already mentioned, further improvements to the headlight features introduced in 0.5 will happen over the 0.5.x release cycle: Lua API -- Support for more native Lua objects ( autocommands , mappings , commands ). LSP -- Improved configuration API, full 3.16 compliance (including semantic highlighting ). Making tree-sitter a stable and faster replacement for syntax highlighting (and beyond) is the major goal for the 0.6.0 release. This includes fundamental work on the decorations API to allow for things like in-line folding or inserting virtual lines and columns (\"anti-conceal\"). Beyond that, notable goals are better file change detection as well as further decoupling the TUI (terminal UI) from the Neovim core with the goal of allowing remote TUI instances. Finally, we are aiming for more regular and frequent releases (at least for patch versions), which will hopefully remove the need for a \"neovim 0.6 when?\" meme for a change.","title":"What's next?"},{"location":"news/2021-07-12-newsletter/#thanks","text":"A big thank you to everyone involved in the project that helped make Neovim 0.5 a reality -- be they contributors, sponsors, bug-reporters, or supporters. In lieu of full credits, here are some of the people you can thank for the features listed in this letter: @tjdevries , @h-michael , @norcalli , and @mjlbach for the LSP client; @vigoux , @bfredl , @theHamsta and the nvim-treesitter team for the tree-sitter integration; @janlazo for the tireless (and often thankless) work of porting patches and runtime updates from vim; and last but not least @bfredl for the decorations API, floating windows, a variety of similar feats of C-code wizardry, and for taking :smile seriously. Finally, thank you to @justinmk and @brammool for your foundational work and your vision -- the *vim community is stronger together!","title":"Thanks"}]}